
WS2022 ESP Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080049bc  080049bc  000059bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a34  08004a34  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a3c  08004a3c  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a3c  08004a3c  00005a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a40  08004a40  00005a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000070  08004ab4  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08004ab4  000065fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110d4  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b60  00000000  00000000  0001716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00019cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8b  00000000  00000000  0001ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015aa8  00000000  00000000  0001b9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b03  00000000  00000000  0003145b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822f0  00000000  00000000  00045f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c824e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f34  00000000  00000000  000c8294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000105  00000000  00000000  000cc1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000cc2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049a4 	.word	0x080049a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080049a4 	.word	0x080049a4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <lcd_write_cmd>:
//  @param:  command (see lcd.h)
//  @retval: none
//**************************************************************************************************
//
void lcd_write_cmd(I2C_HandleTypeDef *hi2c, uint8_t cmd)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	000a      	movs	r2, r1
 80004c6:	1cfb      	adds	r3, r7, #3
 80004c8:	701a      	strb	r2, [r3, #0]
    uint8_t buff[2] = {0x80, 0x00};
 80004ca:	210c      	movs	r1, #12
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2280      	movs	r2, #128	@ 0x80
 80004d0:	801a      	strh	r2, [r3, #0]

    buff[1] = cmd;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	1cfa      	adds	r2, r7, #3
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	705a      	strb	r2, [r3, #1]
        HAL_I2C_Master_Transmit(hi2c, LCD_WR_ADDRESS, buff, sizeof(buff), 0xFFFF);
 80004da:	187a      	adds	r2, r7, r1
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <lcd_write_cmd+0x3c>)
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2302      	movs	r3, #2
 80004e4:	217c      	movs	r1, #124	@ 0x7c
 80004e6:	f001 fd13 	bl	8001f10 <HAL_I2C_Master_Transmit>
        HAL_Delay(10);
 80004ea:	200a      	movs	r0, #10
 80004ec:	f000 ff22 	bl	8001334 <HAL_Delay>
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b004      	add	sp, #16
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	0000ffff 	.word	0x0000ffff

080004fc <lcd_init>:
//  @param:  none
//  @retval: none
//**************************************************************************************************
//
void lcd_init(I2C_HandleTypeDef *hi2c)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	6078      	str	r0, [r7, #4]
    {
        0x80, 0x38, 0x80, 0x39, 0x80, 0x1C, 0x80, 0x72, 0x80, 0x57,
        0x80, 0x6C, 0x80, 0x0F, 0x80, 0x01, 0x80, 0x06, 0x80, 0x02,
    };

    HAL_I2C_Master_Transmit(hi2c, LCD_WR_ADDRESS, init_cmd_buffer, sizeof(init_cmd_buffer), 0xFF);
 8000504:	4a09      	ldr	r2, [pc, #36]	@ (800052c <lcd_init+0x30>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	23ff      	movs	r3, #255	@ 0xff
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2314      	movs	r3, #20
 800050e:	217c      	movs	r1, #124	@ 0x7c
 8000510:	f001 fcfe 	bl	8001f10 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(hi2c, LCD_WR_ADDRESS, init_cmd_buffer, sizeof(init_cmd_buffer), 0xFF);
 8000514:	4a05      	ldr	r2, [pc, #20]	@ (800052c <lcd_init+0x30>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	23ff      	movs	r3, #255	@ 0xff
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2314      	movs	r3, #20
 800051e:	217c      	movs	r1, #124	@ 0x7c
 8000520:	f001 fcf6 	bl	8001f10 <HAL_I2C_Master_Transmit>
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000000 	.word	0x20000000

08000530 <lcd_goto_rc>:
//  @param:  col = 0...15
//  @retval: none
//**************************************************************************************************
//
void lcd_goto_rc(I2C_HandleTypeDef *hi2c, uint8_t row, uint8_t col)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	0008      	movs	r0, r1
 800053a:	0011      	movs	r1, r2
 800053c:	1cfb      	adds	r3, r7, #3
 800053e:	1c02      	adds	r2, r0, #0
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	1cbb      	adds	r3, r7, #2
 8000544:	1c0a      	adds	r2, r1, #0
 8000546:	701a      	strb	r2, [r3, #0]
    if (row == 0)
 8000548:	1cfb      	adds	r3, r7, #3
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d109      	bne.n	8000564 <lcd_goto_rc+0x34>
    {
        lcd_write_cmd(hi2c, 0x80 + col);
 8000550:	1cbb      	adds	r3, r7, #2
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3b80      	subs	r3, #128	@ 0x80
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f7ff ffad 	bl	80004bc <lcd_write_cmd>
    }
    else
    {
        lcd_write_cmd(hi2c, 0xC0 + col);
    }
}
 8000562:	e008      	b.n	8000576 <lcd_goto_rc+0x46>
        lcd_write_cmd(hi2c, 0xC0 + col);
 8000564:	1cbb      	adds	r3, r7, #2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3b40      	subs	r3, #64	@ 0x40
 800056a:	b2da      	uxtb	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f7ff ffa3 	bl	80004bc <lcd_write_cmd>
}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b002      	add	sp, #8
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <lcd_putchar>:
//  @param:  ASCII character
//  @retval: none
//**************************************************************************************************
//
void lcd_putchar(I2C_HandleTypeDef *hi2c, char ch)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	000a      	movs	r2, r1
 800058a:	1cfb      	adds	r3, r7, #3
 800058c:	701a      	strb	r2, [r3, #0]
    uint8_t buff[2] = {0xC0, 0x00};
 800058e:	210c      	movs	r1, #12
 8000590:	187b      	adds	r3, r7, r1
 8000592:	22c0      	movs	r2, #192	@ 0xc0
 8000594:	801a      	strh	r2, [r3, #0]

    buff[1] = ch;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	1cfa      	adds	r2, r7, #3
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(hi2c, LCD_WR_ADDRESS, buff, sizeof(buff), 0xFFFF);
 800059e:	187a      	adds	r2, r7, r1
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <lcd_putchar+0x38>)
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2302      	movs	r3, #2
 80005a8:	217c      	movs	r1, #124	@ 0x7c
 80005aa:	f001 fcb1 	bl	8001f10 <HAL_I2C_Master_Transmit>
}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	0000ffff 	.word	0x0000ffff

080005bc <lcd_putstr>:
//  @param:  Text string
//  @retval: none
//**************************************************************************************************
//
void lcd_putstr(I2C_HandleTypeDef *hi2c, const char *str)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
    while (*str != 0)
 80005c6:	e008      	b.n	80005da <lcd_putstr+0x1e>
    {
        lcd_putchar(hi2c, *str++);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	603a      	str	r2, [r7, #0]
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ffd3 	bl	8000580 <lcd_putchar>
    while (*str != 0)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f2      	bne.n	80005c8 <lcd_putstr+0xc>
    }
}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b002      	add	sp, #8
 80005ea:	bd80      	pop	{r7, pc}

080005ec <HAL_GPIO_EXTI_Callback>:
//  Look: stm32l0xx_it.c and stm32l0xx_hal_gpio.c files
//  This function is called every time when rotary encoder is rotated
//******************************************************************************
//
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	0002      	movs	r2, r0
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	801a      	strh	r2, [r3, #0]
    if (pin == RE_A_Pin)
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	881a      	ldrh	r2, [r3, #0]
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	01db      	lsls	r3, r3, #7
 8000600:	429a      	cmp	r2, r3
 8000602:	d11c      	bne.n	800063e <HAL_GPIO_EXTI_Callback+0x52>
    {
        if (HAL_GPIO_ReadPin(RE_B_GPIO_Port, RE_B_Pin) == 1)
 8000604:	2380      	movs	r3, #128	@ 0x80
 8000606:	021b      	lsls	r3, r3, #8
 8000608:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x5c>)
 800060a:	0019      	movs	r1, r3
 800060c:	0010      	movs	r0, r2
 800060e:	f001 fb93 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000612:	0003      	movs	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d109      	bne.n	800062c <HAL_GPIO_EXTI_Callback+0x40>
            rotary++;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <HAL_GPIO_EXTI_Callback+0x60>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b25b      	sxtb	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	3301      	adds	r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	b25a      	sxtb	r2, r3
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <HAL_GPIO_EXTI_Callback+0x60>)
 8000628:	701a      	strb	r2, [r3, #0]
        else
            rotary--;
    }
}
 800062a:	e008      	b.n	800063e <HAL_GPIO_EXTI_Callback+0x52>
            rotary--;
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <HAL_GPIO_EXTI_Callback+0x60>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	3b01      	subs	r3, #1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	b25a      	sxtb	r2, r3
 800063a:	4b04      	ldr	r3, [pc, #16]	@ (800064c <HAL_GPIO_EXTI_Callback+0x60>)
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	50000800 	.word	0x50000800
 800064c:	200004a8 	.word	0x200004a8

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fdfd 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f8a3 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fad5 	bl	8000c0c <MX_GPIO_Init>
  MX_ADC_Init();
 8000662:	f000 f919 	bl	8000898 <MX_ADC_Init>
  MX_DAC_Init();
 8000666:	f000 f9a7 	bl	80009b8 <MX_DAC_Init>
  MX_I2C1_Init();
 800066a:	f000 f9d3 	bl	8000a14 <MX_I2C1_Init>
  MX_TIM22_Init();
 800066e:	f000 fa11 	bl	8000a94 <MX_TIM22_Init>
  MX_USB_PCD_Init();
 8000672:	f000 faa5 	bl	8000bc0 <MX_USB_PCD_Init>

  /*
   *    This is an example how to print text to LCD display
   */

  lcd_init(&hi2c1);                                     // initialize LCD display (I2C connected)
 8000676:	4b3c      	ldr	r3, [pc, #240]	@ (8000768 <main+0x118>)
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff ff3f 	bl	80004fc <lcd_init>
  lcd_write_cmd(&hi2c1, LCD_CLEAR_DISPLAY);             // clear display
 800067e:	4b3a      	ldr	r3, [pc, #232]	@ (8000768 <main+0x118>)
 8000680:	2101      	movs	r1, #1
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff1a 	bl	80004bc <lcd_write_cmd>
  lcd_write_cmd(&hi2c1, LCD_CURSOR_OFF);                // hide cursor
 8000688:	4b37      	ldr	r3, [pc, #220]	@ (8000768 <main+0x118>)
 800068a:	210c      	movs	r1, #12
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff ff15 	bl	80004bc <lcd_write_cmd>
  lcd_goto_rc(&hi2c1, 0, 0);                            // cursor to first row first col
 8000692:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <main+0x118>)
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ff49 	bl	8000530 <lcd_goto_rc>
  lcd_putstr(&hi2c1, "SWD Test Project");               // print text
 800069e:	4a33      	ldr	r2, [pc, #204]	@ (800076c <main+0x11c>)
 80006a0:	4b31      	ldr	r3, [pc, #196]	@ (8000768 <main+0x118>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f7ff ff89 	bl	80005bc <lcd_putstr>
  lcd_goto_rc(&hi2c1, 1, 0);                            // cursor to second row first col
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <main+0x118>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff ff3d 	bl	8000530 <lcd_goto_rc>
  lcd_putstr(&hi2c1, "Template");                       // print starting texts
 80006b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000770 <main+0x120>)
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <main+0x118>)
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ff7d 	bl	80005bc <lcd_putstr>

  /*
   *    This is  an example how set colors for all RGB leds
   */

  led_colors[0] =  COLOR_RED;
 80006c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <main+0x124>)
 80006c4:	22fc      	movs	r2, #252	@ 0xfc
 80006c6:	0192      	lsls	r2, r2, #6
 80006c8:	601a      	str	r2, [r3, #0]
  led_colors[1] =  COLOR_GREEN;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <main+0x124>)
 80006cc:	22fc      	movs	r2, #252	@ 0xfc
 80006ce:	0392      	lsls	r2, r2, #14
 80006d0:	605a      	str	r2, [r3, #4]
  led_colors[2] =  COLOR_BLUE;
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <main+0x124>)
 80006d4:	223f      	movs	r2, #63	@ 0x3f
 80006d6:	609a      	str	r2, [r3, #8]
  led_colors[3] =  COLOR_PINK;
 80006d8:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <main+0x124>)
 80006da:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <main+0x128>)
 80006dc:	60da      	str	r2, [r3, #12]
  led_colors[4] =  COLOR_CYAN;
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <main+0x124>)
 80006e0:	4a26      	ldr	r2, [pc, #152]	@ (800077c <main+0x12c>)
 80006e2:	611a      	str	r2, [r3, #16]
  led_colors[5] =  COLOR_VIOLET;
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <main+0x124>)
 80006e6:	4a26      	ldr	r2, [pc, #152]	@ (8000780 <main+0x130>)
 80006e8:	615a      	str	r2, [r3, #20]
  led_colors[6] =  COLOR_ORANGE;
 80006ea:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <main+0x124>)
 80006ec:	4a25      	ldr	r2, [pc, #148]	@ (8000784 <main+0x134>)
 80006ee:	619a      	str	r2, [r3, #24]
  led_colors[7] =  COLOR_WHITE;
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <main+0x124>)
 80006f2:	4a25      	ldr	r2, [pc, #148]	@ (8000788 <main+0x138>)
 80006f4:	61da      	str	r2, [r3, #28]
  led_colors[8] =  COLOR_YELLOW;
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <main+0x124>)
 80006f8:	4a24      	ldr	r2, [pc, #144]	@ (800078c <main+0x13c>)
 80006fa:	621a      	str	r2, [r3, #32]
  led_colors[9] =  0x030F1F;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <main+0x124>)
 80006fe:	4a24      	ldr	r2, [pc, #144]	@ (8000790 <main+0x140>)
 8000700:	625a      	str	r2, [r3, #36]	@ 0x24
  led_colors[10] = 0x130F10;
 8000702:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <main+0x124>)
 8000704:	4a23      	ldr	r2, [pc, #140]	@ (8000794 <main+0x144>)
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
  led_colors[11] = 0x131F07;
 8000708:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <main+0x124>)
 800070a:	4a23      	ldr	r2, [pc, #140]	@ (8000798 <main+0x148>)
 800070c:	62da      	str	r2, [r3, #44]	@ 0x2c

  ws2812b_display_all_led_colors(led_colors);
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <main+0x124>)
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fd53 	bl	80011bc <ws2812b_display_all_led_colors>

  /*
   *    This is  an example how to use IO expander chip
   */

  pca9536_configure_port(&hi2c1, 0xC0);         // configure port 4 lower bits i i o o
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <main+0x118>)
 8000718:	21c0      	movs	r1, #192	@ 0xc0
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fb3c 	bl	8000d98 <pca9536_configure_port>
                                                // (i = input, o = output)
                                                // P3 = EXT_IO2, P2 = EXT_IO1, P1 = LCD_BL, P0 = PWM_OE
  pca9536_write_port_outputs(&hi2c1, 0x02);     // set P1 = 1 (LCD backlight ON), P0 = 0 (PWM ON)
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <main+0x118>)
 8000722:	2102      	movs	r1, #2
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fb57 	bl	8000dd8 <pca9536_write_port_outputs>


  HAL_Delay(1000);                              // short delay
 800072a:	23fa      	movs	r3, #250	@ 0xfa
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fe00 	bl	8001334 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


    lcd_write_cmd(&hi2c1, LCD_CLEAR_DISPLAY);       // clear LCD display
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <main+0x118>)
 8000736:	2101      	movs	r1, #1
 8000738:	0018      	movs	r0, r3
 800073a:	f7ff febf 	bl	80004bc <lcd_write_cmd>
    sprintf(buff, "Rotary = %d", rotary);           // print value of rotary...
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <main+0x14c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b25b      	sxtb	r3, r3
 8000744:	001a      	movs	r2, r3
 8000746:	4916      	ldr	r1, [pc, #88]	@ (80007a0 <main+0x150>)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	0018      	movs	r0, r3
 800074c:	f003 fc8c 	bl	8004068 <siprintf>
    lcd_putstr(&hi2c1, buff);                       // to LCD display
 8000750:	1d3a      	adds	r2, r7, #4
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <main+0x118>)
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff ff30 	bl	80005bc <lcd_putstr>
    HAL_Delay(100);
 800075c:	2064      	movs	r0, #100	@ 0x64
 800075e:	f000 fde9 	bl	8001334 <HAL_Delay>
    lcd_write_cmd(&hi2c1, LCD_CLEAR_DISPLAY);       // clear LCD display
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	e7e6      	b.n	8000734 <main+0xe4>
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	200000f8 	.word	0x200000f8
 800076c:	080049bc 	.word	0x080049bc
 8000770:	080049d0 	.word	0x080049d0
 8000774:	20000478 	.word	0x20000478
 8000778:	00101f07 	.word	0x00101f07
 800077c:	00270017 	.word	0x00270017
 8000780:	00001f1f 	.word	0x00001f1f
 8000784:	000f1f00 	.word	0x000f1f00
 8000788:	000f0f0f 	.word	0x000f0f0f
 800078c:	001f1f00 	.word	0x001f1f00
 8000790:	00030f1f 	.word	0x00030f1f
 8000794:	00130f10 	.word	0x00130f10
 8000798:	00131f07 	.word	0x00131f07
 800079c:	200004a8 	.word	0x200004a8
 80007a0:	080049dc 	.word	0x080049dc

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b09d      	sub	sp, #116	@ 0x74
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	2438      	movs	r4, #56	@ 0x38
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	0018      	movs	r0, r3
 80007b0:	2338      	movs	r3, #56	@ 0x38
 80007b2:	001a      	movs	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f003 fc77 	bl	80040a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ba:	2324      	movs	r3, #36	@ 0x24
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	0018      	movs	r0, r3
 80007c0:	2314      	movs	r3, #20
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f003 fc6f 	bl	80040a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2320      	movs	r3, #32
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f003 fc68 	bl	80040a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <SystemClock_Config+0xec>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000894 <SystemClock_Config+0xf0>)
 80007de:	401a      	ands	r2, r3
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <SystemClock_Config+0xec>)
 80007e2:	2180      	movs	r1, #128	@ 0x80
 80007e4:	0109      	lsls	r1, r1, #4
 80007e6:	430a      	orrs	r2, r1
 80007e8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80007ea:	0021      	movs	r1, r4
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2222      	movs	r2, #34	@ 0x22
 80007f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2210      	movs	r2, #16
 80007fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2201      	movs	r2, #1
 8000802:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2202      	movs	r2, #2
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	02d2      	lsls	r2, r2, #11
 8000816:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	03d2      	lsls	r2, r2, #15
 800081e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	187b      	adds	r3, r7, r1
 8000822:	0018      	movs	r0, r3
 8000824:	f001 ffda 	bl	80027dc <HAL_RCC_OscConfig>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800082c:	f000 faae 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	2124      	movs	r1, #36	@ 0x24
 8000832:	187b      	adds	r3, r7, r1
 8000834:	220f      	movs	r2, #15
 8000836:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2203      	movs	r2, #3
 800083c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2101      	movs	r1, #1
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fb85 	bl	8002f64 <HAL_RCC_ClockConfig>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800085e:	f000 fa95 	bl	8000d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2248      	movs	r2, #72	@ 0x48
 8000866:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	04d2      	lsls	r2, r2, #19
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	0018      	movs	r0, r3
 800087a:	f002 fd61 	bl	8003340 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000882:	f000 fa83 	bl	8000d8c <Error_Handler>
  }
}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b01d      	add	sp, #116	@ 0x74
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	40007000 	.word	0x40007000
 8000894:	ffffe7ff 	.word	0xffffe7ff

08000898 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	003b      	movs	r3, r7
 80008a0:	0018      	movs	r0, r3
 80008a2:	2308      	movs	r3, #8
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f003 fbfe 	bl	80040a8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008ac:	4b3d      	ldr	r3, [pc, #244]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008ae:	4a3e      	ldr	r2, [pc, #248]	@ (80009a8 <MX_ADC_Init+0x110>)
 80008b0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80008b2:	4b3c      	ldr	r3, [pc, #240]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80008b8:	4b3a      	ldr	r3, [pc, #232]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008ba:	2290      	movs	r2, #144	@ 0x90
 80008bc:	0392      	lsls	r2, r2, #14
 80008be:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008c0:	4b38      	ldr	r3, [pc, #224]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80008c6:	4b37      	ldr	r3, [pc, #220]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008cc:	4b35      	ldr	r3, [pc, #212]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d2:	4b34      	ldr	r3, [pc, #208]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008d8:	4b32      	ldr	r3, [pc, #200]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b30      	ldr	r3, [pc, #192]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008e2:	2221      	movs	r2, #33	@ 0x21
 80008e4:	2100      	movs	r1, #0
 80008e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e8:	4b2e      	ldr	r3, [pc, #184]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ee:	4b2d      	ldr	r3, [pc, #180]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008f0:	22c2      	movs	r2, #194	@ 0xc2
 80008f2:	32ff      	adds	r2, #255	@ 0xff
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008f6:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <MX_ADC_Init+0x10c>)
 80008f8:	222c      	movs	r2, #44	@ 0x2c
 80008fa:	2100      	movs	r1, #0
 80008fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fe:	4b29      	ldr	r3, [pc, #164]	@ (80009a4 <MX_ADC_Init+0x10c>)
 8000900:	2204      	movs	r2, #4
 8000902:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <MX_ADC_Init+0x10c>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800090a:	4b26      	ldr	r3, [pc, #152]	@ (80009a4 <MX_ADC_Init+0x10c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000910:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <MX_ADC_Init+0x10c>)
 8000912:	2201      	movs	r2, #1
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000916:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <MX_ADC_Init+0x10c>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800091c:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <MX_ADC_Init+0x10c>)
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fd2c 	bl	800137c <HAL_ADC_Init>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000928:	f000 fa30 	bl	8000d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800092c:	003b      	movs	r3, r7
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000932:	003b      	movs	r3, r7
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	0152      	lsls	r2, r2, #5
 8000938:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800093a:	003a      	movs	r2, r7
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_ADC_Init+0x10c>)
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fe8f 	bl	8001664 <HAL_ADC_ConfigChannel>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800094a:	f000 fa1f 	bl	8000d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800094e:	003b      	movs	r3, r7
 8000950:	4a16      	ldr	r2, [pc, #88]	@ (80009ac <MX_ADC_Init+0x114>)
 8000952:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000954:	003a      	movs	r2, r7
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_ADC_Init+0x10c>)
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fe82 	bl	8001664 <HAL_ADC_ConfigChannel>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000964:	f000 fa12 	bl	8000d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000968:	003b      	movs	r3, r7
 800096a:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <MX_ADC_Init+0x118>)
 800096c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800096e:	003a      	movs	r2, r7
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_ADC_Init+0x10c>)
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f000 fe75 	bl	8001664 <HAL_ADC_ConfigChannel>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800097e:	f000 fa05 	bl	8000d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000982:	003b      	movs	r3, r7
 8000984:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <MX_ADC_Init+0x11c>)
 8000986:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000988:	003a      	movs	r2, r7
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_ADC_Init+0x10c>)
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fe68 	bl	8001664 <HAL_ADC_ConfigChannel>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8000998:	f000 f9f8 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000008c 	.word	0x2000008c
 80009a8:	40012400 	.word	0x40012400
 80009ac:	04000002 	.word	0x04000002
 80009b0:	08000004 	.word	0x08000004
 80009b4:	0c000008 	.word	0x0c000008

080009b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009be:	003b      	movs	r3, r7
 80009c0:	0018      	movs	r0, r3
 80009c2:	2308      	movs	r3, #8
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f003 fb6e 	bl	80040a8 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_DAC_Init+0x54>)
 80009ce:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <MX_DAC_Init+0x58>)
 80009d0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_DAC_Init+0x54>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 ffc9 	bl	800196c <HAL_DAC_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 80009de:	f000 f9d5 	bl	8000d8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009e8:	003b      	movs	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009ee:	0039      	movs	r1, r7
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_DAC_Init+0x54>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 ffdd 	bl	80019b4 <HAL_DAC_ConfigChannel>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 80009fe:	f000 f9c5 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	200000e8 	.word	0x200000e8
 8000a10:	40007400 	.word	0x40007400

08000a14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <MX_I2C1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <MX_I2C1_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 f9c7 	bl	8001de4 <HAL_I2C_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a5a:	f000 f997 	bl	8000d8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fce8 	bl	8002438 <HAL_I2CEx_ConfigAnalogFilter>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 f98e 	bl	8000d8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a72:	2100      	movs	r1, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fd2b 	bl	80024d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f985 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000f8 	.word	0x200000f8
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	00707cbb 	.word	0x00707cbb

08000a94 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	2318      	movs	r3, #24
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f003 faff 	bl	80040a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	2310      	movs	r3, #16
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f003 faf7 	bl	80040a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	003b      	movs	r3, r7
 8000abc:	0018      	movs	r0, r3
 8000abe:	2310      	movs	r3, #16
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f003 faf0 	bl	80040a8 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000aca:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb8 <MX_TIM22_Init+0x124>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8000ace:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b37      	ldr	r3, [pc, #220]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8000ada:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000adc:	4a37      	ldr	r2, [pc, #220]	@ (8000bbc <MX_TIM22_Init+0x128>)
 8000ade:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b34      	ldr	r3, [pc, #208]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b33      	ldr	r3, [pc, #204]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000aec:	4b31      	ldr	r3, [pc, #196]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 fd6c 	bl	80035cc <HAL_TIM_Base_Init>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM22_Init+0x68>
  {
    Error_Handler();
 8000af8:	f000 f948 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	2118      	movs	r1, #24
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2280      	movs	r2, #128	@ 0x80
 8000b02:	0152      	lsls	r2, r2, #5
 8000b04:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 ff4b 	bl	80039a8 <HAL_TIM_ConfigClockSource>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM22_Init+0x86>
  {
    Error_Handler();
 8000b16:	f000 f939 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 fd95 	bl	800364c <HAL_TIM_OC_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8000b26:	f000 f931 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8000b2a:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f002 fdd5 	bl	80036dc <HAL_TIM_PWM_Init>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 8000b36:	f000 f929 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000b48:	187a      	adds	r2, r7, r1
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f003 f9f0 	bl	8003f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM22_Init+0xc8>
  {
    Error_Handler();
 8000b58:	f000 f918 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b62:	003b      	movs	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6e:	003b      	movs	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b74:	0039      	movs	r1, r7
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 fdf6 	bl	800376c <HAL_TIM_OC_ConfigChannel>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM22_Init+0xf4>
  {
    Error_Handler();
 8000b84:	f000 f902 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b88:	003b      	movs	r3, r7
 8000b8a:	2260      	movs	r2, #96	@ 0x60
 8000b8c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b8e:	0039      	movs	r1, r7
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000b92:	2204      	movs	r2, #4
 8000b94:	0018      	movs	r0, r3
 8000b96:	f002 fe41 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM22_Init+0x10e>
  {
    Error_Handler();
 8000b9e:	f000 f8f5 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <MX_TIM22_Init+0x120>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fa1f 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b00a      	add	sp, #40	@ 0x28
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	20000144 	.word	0x20000144
 8000bb8:	40011400 	.word	0x40011400
 8000bbc:	0000ffff 	.word	0x0000ffff

08000bc0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <MX_USB_PCD_Init+0x44>)
 8000bc6:	4a10      	ldr	r2, [pc, #64]	@ (8000c08 <MX_USB_PCD_Init+0x48>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <MX_USB_PCD_Init+0x44>)
 8000bcc:	2208      	movs	r2, #8
 8000bce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <MX_USB_PCD_Init+0x44>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <MX_USB_PCD_Init+0x44>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <MX_USB_PCD_Init+0x44>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <MX_USB_PCD_Init+0x44>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <MX_USB_PCD_Init+0x44>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000bee:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <MX_USB_PCD_Init+0x44>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 fcb9 	bl	8002568 <HAL_PCD_Init>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000bfa:	f000 f8c7 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000184 	.word	0x20000184
 8000c08:	40005c00 	.word	0x40005c00

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	240c      	movs	r4, #12
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	0018      	movs	r0, r3
 8000c18:	2314      	movs	r3, #20
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f003 fa43 	bl	80040a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b57      	ldr	r3, [pc, #348]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c26:	4b56      	ldr	r3, [pc, #344]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c28:	2104      	movs	r1, #4
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c2e:	4b54      	ldr	r3, [pc, #336]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c32:	2204      	movs	r2, #4
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b51      	ldr	r3, [pc, #324]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c3e:	4b50      	ldr	r3, [pc, #320]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c40:	2101      	movs	r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c46:	4b4e      	ldr	r3, [pc, #312]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b4b      	ldr	r3, [pc, #300]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c56:	4b4a      	ldr	r3, [pc, #296]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c58:	2102      	movs	r1, #2
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c5e:	4b48      	ldr	r3, [pc, #288]	@ (8000d80 <MX_GPIO_Init+0x174>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c62:	2202      	movs	r2, #2
 8000c64:	4013      	ands	r3, r2
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_DATA_GPIO_Port, RGB_DATA_Pin, GPIO_PIN_RESET);
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	0059      	lsls	r1, r3, #1
 8000c6e:	23a0      	movs	r3, #160	@ 0xa0
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	2200      	movs	r2, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 f87c 	bl	8001d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RE_A_Pin */
  GPIO_InitStruct.Pin = RE_A_Pin;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2280      	movs	r2, #128	@ 0x80
 8000c7e:	01d2      	lsls	r2, r2, #7
 8000c80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2284      	movs	r2, #132	@ 0x84
 8000c86:	0392      	lsls	r2, r2, #14
 8000c88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RE_A_GPIO_Port, &GPIO_InitStruct);
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	4a3c      	ldr	r2, [pc, #240]	@ (8000d84 <MX_GPIO_Init+0x178>)
 8000c94:	0019      	movs	r1, r3
 8000c96:	0010      	movs	r0, r2
 8000c98:	f000 fed8 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RE_B_Pin */
  GPIO_InitStruct.Pin = RE_B_Pin;
 8000c9c:	0021      	movs	r1, r4
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	0212      	lsls	r2, r2, #8
 8000ca4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	000c      	movs	r4, r1
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RE_B_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	4a33      	ldr	r2, [pc, #204]	@ (8000d84 <MX_GPIO_Init+0x178>)
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0010      	movs	r0, r2
 8000cbc:	f000 fec6 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	22e0      	movs	r2, #224	@ 0xe0
 8000cc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2202      	movs	r2, #2
 8000cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	193a      	adds	r2, r7, r4
 8000ce0:	23a0      	movs	r3, #160	@ 0xa0
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 feb0 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2203      	movs	r2, #3
 8000cf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	4a21      	ldr	r2, [pc, #132]	@ (8000d88 <MX_GPIO_Init+0x17c>)
 8000d02:	0019      	movs	r1, r3
 8000d04:	0010      	movs	r0, r2
 8000d06:	f000 fea1 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_DATA_Pin */
  GPIO_InitStruct.Pin = RGB_DATA_Pin;
 8000d0a:	0021      	movs	r1, r4
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	0052      	lsls	r2, r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	000c      	movs	r4, r1
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	2201      	movs	r2, #1
 8000d1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2203      	movs	r2, #3
 8000d26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 8000d28:	193a      	adds	r2, r7, r4
 8000d2a:	23a0      	movs	r3, #160	@ 0xa0
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	0011      	movs	r1, r2
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 fe8b 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d36:	0021      	movs	r1, r4
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	22c0      	movs	r2, #192	@ 0xc0
 8000d3c:	00d2      	lsls	r2, r2, #3
 8000d3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2202      	movs	r2, #2
 8000d44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2204      	movs	r2, #4
 8000d56:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	187a      	adds	r2, r7, r1
 8000d5a:	23a0      	movs	r3, #160	@ 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	0011      	movs	r1, r2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fe73 	bl	8001a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2007      	movs	r0, #7
 8000d6c:	f000 fdcc 	bl	8001908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d70:	2007      	movs	r0, #7
 8000d72:	f000 fdde 	bl	8001932 <HAL_NVIC_EnableIRQ>

}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b009      	add	sp, #36	@ 0x24
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	40021000 	.word	0x40021000
 8000d84:	50000800 	.word	0x50000800
 8000d88:	50000400 	.word	0x50000400

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	e7fd      	b.n	8000d94 <Error_Handler+0x8>

08000d98 <pca9536_configure_port>:
//  @param:  dir     ---- xxxx      0 = Output  1 = Input
//  @retval: none
//***************************************************************************************
//
void pca9536_configure_port(I2C_HandleTypeDef *hi2c, uint8_t dir)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	000a      	movs	r2, r1
 8000da2:	1cfb      	adds	r3, r7, #3
 8000da4:	701a      	strb	r2, [r3, #0]
    uint8_t buff[2] = {0x03, 0x00};         // 0x03 = command byte Configuration
 8000da6:	210c      	movs	r1, #12
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2203      	movs	r2, #3
 8000dac:	801a      	strh	r2, [r3, #0]

    buff[1] = dir;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	1cfa      	adds	r2, r7, #3
 8000db2:	7812      	ldrb	r2, [r2, #0]
 8000db4:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(hi2c, PCA9536_WR_ADDRESS, buff, sizeof(buff), 0xFFFF);
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <pca9536_configure_port+0x3c>)
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	2182      	movs	r1, #130	@ 0x82
 8000dc2:	f001 f8a5 	bl	8001f10 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f000 fab4 	bl	8001334 <HAL_Delay>
}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b004      	add	sp, #16
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	0000ffff 	.word	0x0000ffff

08000dd8 <pca9536_write_port_outputs>:
//  @param:  pins    ---- xxxx specifies values to be written to 4 GPIO of PCA9536
//  @retval: none
//***************************************************************************************
//
void pca9536_write_port_outputs(I2C_HandleTypeDef *hi2c, uint8_t pins)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	000a      	movs	r2, r1
 8000de2:	1cfb      	adds	r3, r7, #3
 8000de4:	701a      	strb	r2, [r3, #0]
    uint8_t buff[2] = {0x01, 0x00};         // 0x01 = command byte Output Port
 8000de6:	210c      	movs	r1, #12
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2201      	movs	r2, #1
 8000dec:	801a      	strh	r2, [r3, #0]

    buff[1] = pins;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	1cfa      	adds	r2, r7, #3
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(hi2c, PCA9536_WR_ADDRESS, buff, sizeof(buff), 0xFFFF);
 8000df6:	187a      	adds	r2, r7, r1
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <pca9536_write_port_outputs+0x3c>)
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2302      	movs	r3, #2
 8000e00:	2182      	movs	r1, #130	@ 0x82
 8000e02:	f001 f885 	bl	8001f10 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8000e06:	200a      	movs	r0, #10
 8000e08:	f000 fa94 	bl	8001334 <HAL_Delay>
}
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	0000ffff 	.word	0x0000ffff

08000e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <HAL_MspInit+0x24>)
 8000e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_MspInit+0x24>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <HAL_MspInit+0x24>)
 8000e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_MspInit+0x24>)
 8000e2e:	2180      	movs	r1, #128	@ 0x80
 8000e30:	0549      	lsls	r1, r1, #21
 8000e32:	430a      	orrs	r2, r1
 8000e34:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	240c      	movs	r4, #12
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f003 f928 	bl	80040a8 <memset>
  if(hadc->Instance==ADC1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a14      	ldr	r2, [pc, #80]	@ (8000eb0 <HAL_ADC_MspInit+0x70>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d122      	bne.n	8000ea8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_ADC_MspInit+0x74>)
 8000e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <HAL_ADC_MspInit+0x74>)
 8000e68:	2180      	movs	r1, #128	@ 0x80
 8000e6a:	0089      	lsls	r1, r1, #2
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <HAL_ADC_MspInit+0x74>)
 8000e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_ADC_MspInit+0x74>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <HAL_ADC_MspInit+0x74>)
 8000e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e80:	2201      	movs	r2, #1
 8000e82:	4013      	ands	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2203      	movs	r2, #3
 8000e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	193a      	adds	r2, r7, r4
 8000e9c:	23a0      	movs	r3, #160	@ 0xa0
 8000e9e:	05db      	lsls	r3, r3, #23
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fdd2 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b009      	add	sp, #36	@ 0x24
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	40012400 	.word	0x40012400
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	240c      	movs	r4, #12
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	2314      	movs	r3, #20
 8000ec8:	001a      	movs	r2, r3
 8000eca:	2100      	movs	r1, #0
 8000ecc:	f003 f8ec 	bl	80040a8 <memset>
  if(hdac->Instance==DAC)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <HAL_DAC_MspInit+0x70>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d122      	bne.n	8000f20 <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_DAC_MspInit+0x74>)
 8000edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <HAL_DAC_MspInit+0x74>)
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	0589      	lsls	r1, r1, #22
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <HAL_DAC_MspInit+0x74>)
 8000eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_DAC_MspInit+0x74>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <HAL_DAC_MspInit+0x74>)
 8000ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4013      	ands	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	2210      	movs	r2, #16
 8000f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	2203      	movs	r2, #3
 8000f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	193a      	adds	r2, r7, r4
 8000f14:	23a0      	movs	r3, #160	@ 0xa0
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 fd96 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b009      	add	sp, #36	@ 0x24
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	40007400 	.word	0x40007400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	240c      	movs	r4, #12
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2314      	movs	r3, #20
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f003 f8b0 	bl	80040a8 <memset>
  if(hi2c->Instance==I2C1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <HAL_I2C_MspInit+0x7c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d128      	bne.n	8000fa4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f58:	2102      	movs	r1, #2
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f6a:	0021      	movs	r1, r4
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	22c0      	movs	r2, #192	@ 0xc0
 8000f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2212      	movs	r2, #18
 8000f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2203      	movs	r2, #3
 8000f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2201      	movs	r2, #1
 8000f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <HAL_I2C_MspInit+0x84>)
 8000f8e:	0019      	movs	r1, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	f000 fd5b 	bl	8001a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0389      	lsls	r1, r1, #14
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b009      	add	sp, #36	@ 0x24
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	50000400 	.word	0x50000400

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM22)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x28>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d105      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_TIM_Base_MspInit+0x2c>)
 8000fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fce:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_TIM_Base_MspInit+0x2c>)
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	40011400 	.word	0x40011400
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	240c      	movs	r4, #12
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f003 f854 	bl	80040a8 <memset>
  if(htim->Instance==TIM22)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <HAL_TIM_MspPostInit+0x70>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d121      	bne.n	800104e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM22_MspPostInit 0 */

  /* USER CODE END TIM22_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b14      	ldr	r3, [pc, #80]	@ (800105c <HAL_TIM_MspPostInit+0x74>)
 800100c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <HAL_TIM_MspPostInit+0x74>)
 8001010:	2102      	movs	r1, #2
 8001012:	430a      	orrs	r2, r1
 8001014:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <HAL_TIM_MspPostInit+0x74>)
 8001018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101a:	2202      	movs	r2, #2
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration
    PB4     ------> TIM22_CH1
    PB5     ------> TIM22_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001022:	0021      	movs	r1, r4
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2230      	movs	r2, #48	@ 0x30
 8001028:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2202      	movs	r2, #2
 800102e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2204      	movs	r2, #4
 8001040:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	187b      	adds	r3, r7, r1
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <HAL_TIM_MspPostInit+0x78>)
 8001046:	0019      	movs	r1, r3
 8001048:	0010      	movs	r0, r2
 800104a:	f000 fcff 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b009      	add	sp, #36	@ 0x24
 8001054:	bd90      	pop	{r4, r7, pc}
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	40011400 	.word	0x40011400
 800105c:	40021000 	.word	0x40021000
 8001060:	50000400 	.word	0x50000400

08001064 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <HAL_PCD_MspInit+0x28>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d106      	bne.n	8001084 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_PCD_MspInit+0x2c>)
 8001078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_PCD_MspInit+0x2c>)
 800107c:	2180      	movs	r1, #128	@ 0x80
 800107e:	0409      	lsls	r1, r1, #16
 8001080:	430a      	orrs	r2, r1
 8001082:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40005c00 	.word	0x40005c00
 8001090:	40021000 	.word	0x40021000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f91e 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RE_A_Pin);
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	01db      	lsls	r3, r3, #7
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fe6c 	bl	8001dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	18d3      	adds	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f002 ffd4 	bl	80040b8 <__errno>
 8001110:	0003      	movs	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	2301      	movs	r3, #1
 8001118:	425b      	negs	r3, r3
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	18d2      	adds	r2, r2, r3
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <_sbrk+0x64>)
 800112c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b006      	add	sp, #24
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20002000 	.word	0x20002000
 800113c:	00000400 	.word	0x00000400
 8001140:	200004ac 	.word	0x200004ac
 8001144:	20000600 	.word	0x20000600

08001148 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <ws2812b_set_colors>:
//  bit 1 =  |  T1H = 800 ns  |T0L = 450 ns| = 1.25 us   Hi or LO times +/- 150 ns Total bit time +/- 600 ns
//***********************************************************************************************************
//
__attribute__((optimize("-Ofast")))                     // function must optimized for speed
void ws2812b_set_colors(uint32_t grb)
{
 8001154:	b530      	push	{r4, r5, lr}
    uint_fast32_t ns;                                   // variable for delay
    uint_fast32_t mask = 0x00800000;                    // start from the highest bit
 8001156:	2380      	movs	r3, #128	@ 0x80
            while(ns--)
                asm("nop");
        }
        else                                            // *** bit 0 ***
        {
            RGB_DATA_GPIO_Port->BSRR = RGB_DATA_Pin;    // 400 ns   should be
 8001158:	21a0      	movs	r1, #160	@ 0xa0
 800115a:	2480      	movs	r4, #128	@ 0x80
{
 800115c:	2218      	movs	r2, #24
 800115e:	0005      	movs	r5, r0
    uint_fast32_t mask = 0x00800000;                    // start from the highest bit
 8001160:	041b      	lsls	r3, r3, #16
            RGB_DATA_GPIO_Port->BSRR = RGB_DATA_Pin;    // 400 ns   should be
 8001162:	05c9      	lsls	r1, r1, #23
 8001164:	0064      	lsls	r4, r4, #1
 8001166:	e016      	b.n	8001196 <ws2812b_set_colors+0x42>
                asm("nop");
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	46c0      	nop			@ (mov r8, r8)
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	46c0      	nop			@ (mov r8, r8)
            RGB_DATA_GPIO_Port->BRR = RGB_DATA_Pin;     // 450 ns   should be
 8001182:	628c      	str	r4, [r1, #40]	@ 0x28
            while(ns--)
                asm("nop");
            RGB_DATA_GPIO_Port->BRR = RGB_DATA_Pin;     // 850 ns   should be
            ns = 12;                                    // 840 ns   measured
            while(ns--)
                asm("nop");
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46c0      	nop			@ (mov r8, r8)
    for (uint_fast8_t i=0; i<24; i++)                   // 24 bits
 800118e:	3a01      	subs	r2, #1
        }
        mask >>= 1;                                     // next bit
 8001190:	085b      	lsrs	r3, r3, #1
    for (uint_fast8_t i=0; i<24; i++)                   // 24 bits
 8001192:	2a00      	cmp	r2, #0
 8001194:	d011      	beq.n	80011ba <ws2812b_set_colors+0x66>
            RGB_DATA_GPIO_Port->BSRR = RGB_DATA_Pin;    // 800 ns   should be
 8001196:	618c      	str	r4, [r1, #24]
        if (grb & mask)                                 // *** bit 1 ***
 8001198:	422b      	tst	r3, r5
 800119a:	d1e5      	bne.n	8001168 <ws2812b_set_colors+0x14>
                asm("nop");
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	46c0      	nop			@ (mov r8, r8)
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	46c0      	nop			@ (mov r8, r8)
            RGB_DATA_GPIO_Port->BRR = RGB_DATA_Pin;     // 850 ns   should be
 80011a8:	628c      	str	r4, [r1, #40]	@ 0x28
                asm("nop");
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	e7e4      	b.n	8001184 <ws2812b_set_colors+0x30>
    }
}
 80011ba:	bd30      	pop	{r4, r5, pc}

080011bc <ws2812b_display_all_led_colors>:
//  @param:  pointer to 12 element array for 24 bit led GRB colors
//  @retval: none
//***************************************************************************************
//
void ws2812b_display_all_led_colors(uint32_t* buff)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    for (uint8_t i=0; i<12; i++)
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e00e      	b.n	80011ec <ws2812b_display_all_led_colors+0x30>
        ws2812b_set_colors(buff[i]);
 80011ce:	240f      	movs	r4, #15
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff ffb9 	bl	8001154 <ws2812b_set_colors>
    for (uint8_t i=0; i<12; i++)
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	3201      	adds	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	230f      	movs	r3, #15
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b0b      	cmp	r3, #11
 80011f4:	d9eb      	bls.n	80011ce <ws2812b_display_all_led_colors+0x12>
}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b005      	add	sp, #20
 80011fe:	bd90      	pop	{r4, r7, pc}

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001200:	480d      	ldr	r0, [pc, #52]	@ (8001238 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001202:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	@ (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	@ (800124c <LoopForever+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800122a:	f7ff ff8d 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f002 ff49 	bl	80040c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fa0d 	bl	8000650 <main>

08001236 <LoopForever>:

LoopForever:
    b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
   ldr   r0, =_estack
 8001238:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001244:	08004a44 	.word	0x08004a44
  ldr r2, =_sbss
 8001248:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800124c:	200005fc 	.word	0x200005fc

08001250 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_COMP_IRQHandler>
	...

08001254 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_Init+0x3c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_Init+0x3c>)
 8001266:	2140      	movs	r1, #64	@ 0x40
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f811 	bl	8001294 <HAL_InitTick>
 8001272:	1e03      	subs	r3, r0, #0
 8001274:	d003      	beq.n	800127e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e001      	b.n	8001282 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127e:	f7ff fdcb 	bl	8000e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	40022000 	.word	0x40022000

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_InitTick+0x5c>)
 800129e:	681c      	ldr	r4, [r3, #0]
 80012a0:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <HAL_InitTick+0x60>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	0019      	movs	r1, r3
 80012a6:	23fa      	movs	r3, #250	@ 0xfa
 80012a8:	0098      	lsls	r0, r3, #2
 80012aa:	f7fe ff37 	bl	800011c <__udivsi3>
 80012ae:	0003      	movs	r3, r0
 80012b0:	0019      	movs	r1, r3
 80012b2:	0020      	movs	r0, r4
 80012b4:	f7fe ff32 	bl	800011c <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fb49 	bl	8001952 <HAL_SYSTICK_Config>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e00f      	b.n	80012e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d80b      	bhi.n	80012e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	2301      	movs	r3, #1
 80012d2:	425b      	negs	r3, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 fb16 	bl	8001908 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_InitTick+0x64>)
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b003      	add	sp, #12
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	20000014 	.word	0x20000014
 80012f4:	2000001c 	.word	0x2000001c
 80012f8:	20000018 	.word	0x20000018

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_IncTick+0x1c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	001a      	movs	r2, r3
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <HAL_IncTick+0x20>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	18d2      	adds	r2, r2, r3
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_IncTick+0x20>)
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	46c0      	nop			@ (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	2000001c 	.word	0x2000001c
 800131c:	200004b0 	.word	0x200004b0

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b02      	ldr	r3, [pc, #8]	@ (8001330 <HAL_GetTick+0x10>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	200004b0 	.word	0x200004b0

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff fff0 	bl	8001320 <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	001a      	movs	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	189b      	adds	r3, r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	f7ff ffe0 	bl	8001320 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	2000001c 	.word	0x2000001c

0800137c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e159      	b.n	8001642 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10a      	bne.n	80013ac <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	659a      	str	r2, [r3, #88]	@ 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2250      	movs	r2, #80	@ 0x50
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff fd4a 	bl	8000e40 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b0:	2210      	movs	r2, #16
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b10      	cmp	r3, #16
 80013b6:	d005      	beq.n	80013c4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2204      	movs	r2, #4
 80013c0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80013c2:	d00b      	beq.n	80013dc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c8:	2210      	movs	r2, #16
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2250      	movs	r2, #80	@ 0x50
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e132      	b.n	8001642 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e0:	4a9a      	ldr	r2, [pc, #616]	@ (800164c <HAL_ADC_Init+0x2d0>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	2202      	movs	r2, #2
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2203      	movs	r2, #3
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d108      	bne.n	800140c <HAL_ADC_Init+0x90>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_ADC_Init+0x90>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_ADC_Init+0x92>
 800140c:	2300      	movs	r3, #0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d149      	bne.n	80014a6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	23c0      	movs	r3, #192	@ 0xc0
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	429a      	cmp	r2, r3
 800141c:	d00b      	beq.n	8001436 <HAL_ADC_Init+0xba>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	429a      	cmp	r2, r3
 8001428:	d005      	beq.n	8001436 <HAL_ADC_Init+0xba>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	429a      	cmp	r2, r3
 8001434:	d111      	bne.n	800145a <HAL_ADC_Init+0xde>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	0892      	lsrs	r2, r2, #2
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6919      	ldr	r1, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	611a      	str	r2, [r3, #16]
 8001458:	e014      	b.n	8001484 <HAL_ADC_Init+0x108>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	0892      	lsrs	r2, r2, #2
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	4b79      	ldr	r3, [pc, #484]	@ (8001650 <HAL_ADC_Init+0x2d4>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b78      	ldr	r3, [pc, #480]	@ (8001650 <HAL_ADC_Init+0x2d4>)
 8001470:	4978      	ldr	r1, [pc, #480]	@ (8001654 <HAL_ADC_Init+0x2d8>)
 8001472:	400a      	ands	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	4b76      	ldr	r3, [pc, #472]	@ (8001650 <HAL_ADC_Init+0x2d4>)
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4b74      	ldr	r3, [pc, #464]	@ (8001650 <HAL_ADC_Init+0x2d4>)
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2118      	movs	r1, #24
 8001490:	438a      	bics	r2, r1
 8001492:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68d9      	ldr	r1, [r3, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80014a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001650 <HAL_ADC_Init+0x2d4>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b69      	ldr	r3, [pc, #420]	@ (8001650 <HAL_ADC_Init+0x2d4>)
 80014ac:	496a      	ldr	r1, [pc, #424]	@ (8001658 <HAL_ADC_Init+0x2dc>)
 80014ae:	400a      	ands	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80014b2:	4b67      	ldr	r3, [pc, #412]	@ (8001650 <HAL_ADC_Init+0x2d4>)
 80014b4:	6819      	ldr	r1, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ba:	065a      	lsls	r2, r3, #25
 80014bc:	4b64      	ldr	r3, [pc, #400]	@ (8001650 <HAL_ADC_Init+0x2d4>)
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	055b      	lsls	r3, r3, #21
 80014cc:	4013      	ands	r3, r2
 80014ce:	d108      	bne.n	80014e2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0549      	lsls	r1, r1, #21
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	495b      	ldr	r1, [pc, #364]	@ (800165c <HAL_ADC_Init+0x2e0>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68d9      	ldr	r1, [r3, #12]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d101      	bne.n	8001508 <HAL_ADC_Init+0x18c>
 8001504:	2304      	movs	r3, #4
 8001506:	e000      	b.n	800150a <HAL_ADC_Init+0x18e>
 8001508:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800150a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2020      	movs	r0, #32
 8001510:	5c1b      	ldrb	r3, [r3, r0]
 8001512:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001514:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	202c      	movs	r0, #44	@ 0x2c
 800151a:	5c1b      	ldrb	r3, [r3, r0]
 800151c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800151e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001524:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800152c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001534:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001542:	23c2      	movs	r3, #194	@ 0xc2
 8001544:	33ff      	adds	r3, #255	@ 0xff
 8001546:	429a      	cmp	r2, r3
 8001548:	d00b      	beq.n	8001562 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68d9      	ldr	r1, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2221      	movs	r2, #33	@ 0x21
 8001566:	5c9b      	ldrb	r3, [r3, r2]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d11a      	bne.n	80015a2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	5c9b      	ldrb	r3, [r3, r2]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	0249      	lsls	r1, r1, #9
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	e00b      	b.n	80015a2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158e:	2220      	movs	r2, #32
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	2201      	movs	r2, #1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d11f      	bne.n	80015ea <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	492a      	ldr	r1, [pc, #168]	@ (8001660 <HAL_ADC_Init+0x2e4>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6919      	ldr	r1, [r3, #16]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80015c8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80015ce:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	e00e      	b.n	8001608 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2101      	movs	r1, #1
 8001604:	438a      	bics	r2, r1
 8001606:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2107      	movs	r1, #7
 8001614:	438a      	bics	r2, r1
 8001616:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6959      	ldr	r1, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001634:	2203      	movs	r2, #3
 8001636:	4393      	bics	r3, r2
 8001638:	2201      	movs	r2, #1
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	fffffefd 	.word	0xfffffefd
 8001650:	40012708 	.word	0x40012708
 8001654:	ffc3ffff 	.word	0xffc3ffff
 8001658:	fdffffff 	.word	0xfdffffff
 800165c:	fffe0219 	.word	0xfffe0219
 8001660:	fffffc03 	.word	0xfffffc03

08001664 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2250      	movs	r2, #80	@ 0x50
 8001672:	5c9b      	ldrb	r3, [r3, r2]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_ADC_ConfigChannel+0x18>
 8001678:	2302      	movs	r3, #2
 800167a:	e06c      	b.n	8001756 <HAL_ADC_ConfigChannel+0xf2>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2250      	movs	r2, #80	@ 0x50
 8001680:	2101      	movs	r1, #1
 8001682:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2204      	movs	r2, #4
 800168c:	4013      	ands	r3, r2
 800168e:	d00b      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001694:	2220      	movs	r2, #32
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2250      	movs	r2, #80	@ 0x50
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e056      	b.n	8001756 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4a2c      	ldr	r2, [pc, #176]	@ (8001760 <HAL_ADC_ConfigChannel+0xfc>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d028      	beq.n	8001704 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	035b      	lsls	r3, r3, #13
 80016be:	0b5a      	lsrs	r2, r3, #13
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	02db      	lsls	r3, r3, #11
 80016d0:	4013      	ands	r3, r2
 80016d2:	d009      	beq.n	80016e8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80016d4:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <HAL_ADC_ConfigChannel+0x100>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <HAL_ADC_ConfigChannel+0x100>)
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	0409      	lsls	r1, r1, #16
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80016e2:	200a      	movs	r0, #10
 80016e4:	f000 f844 	bl	8001770 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	029b      	lsls	r3, r3, #10
 80016f0:	4013      	ands	r3, r2
 80016f2:	d02b      	beq.n	800174c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_ADC_ConfigChannel+0x100>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_ADC_ConfigChannel+0x100>)
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	03c9      	lsls	r1, r1, #15
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e023      	b.n	800174c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	035b      	lsls	r3, r3, #13
 8001710:	0b5b      	lsrs	r3, r3, #13
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	4013      	ands	r3, r2
 8001726:	d005      	beq.n	8001734 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HAL_ADC_ConfigChannel+0x100>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <HAL_ADC_ConfigChannel+0x100>)
 800172e:	490e      	ldr	r1, [pc, #56]	@ (8001768 <HAL_ADC_ConfigChannel+0x104>)
 8001730:	400a      	ands	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	d005      	beq.n	800174c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <HAL_ADC_ConfigChannel+0x100>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <HAL_ADC_ConfigChannel+0x100>)
 8001746:	4909      	ldr	r1, [pc, #36]	@ (800176c <HAL_ADC_ConfigChannel+0x108>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2250      	movs	r2, #80	@ 0x50
 8001750:	2100      	movs	r1, #0
 8001752:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	00001001 	.word	0x00001001
 8001764:	40012708 	.word	0x40012708
 8001768:	ff7fffff 	.word	0xff7fffff
 800176c:	ffbfffff 	.word	0xffbfffff

08001770 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <ADC_DelayMicroSecond+0x38>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	490b      	ldr	r1, [pc, #44]	@ (80017ac <ADC_DelayMicroSecond+0x3c>)
 800177e:	0018      	movs	r0, r3
 8001780:	f7fe fccc 	bl	800011c <__udivsi3>
 8001784:	0003      	movs	r3, r0
 8001786:	001a      	movs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4353      	muls	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800178e:	e002      	b.n	8001796 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3b01      	subs	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f9      	bne.n	8001790 <ADC_DelayMicroSecond+0x20>
  } 
}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b004      	add	sp, #16
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	20000014 	.word	0x20000014
 80017ac:	000f4240 	.word	0x000f4240

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	0002      	movs	r2, r0
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80017c2:	d809      	bhi.n	80017d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	001a      	movs	r2, r3
 80017ca:	231f      	movs	r3, #31
 80017cc:	401a      	ands	r2, r3
 80017ce:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_EnableIRQ+0x30>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	4091      	lsls	r1, r2
 80017d4:	000a      	movs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
  }
}
 80017d8:	46c0      	nop			@ (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	0002      	movs	r2, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80017f8:	d828      	bhi.n	800184c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fa:	4a2f      	ldr	r2, [pc, #188]	@ (80018b8 <__NVIC_SetPriority+0xd4>)
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b25b      	sxtb	r3, r3
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	33c0      	adds	r3, #192	@ 0xc0
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	589b      	ldr	r3, [r3, r2]
 800180a:	1dfa      	adds	r2, r7, #7
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	0011      	movs	r1, r2
 8001810:	2203      	movs	r2, #3
 8001812:	400a      	ands	r2, r1
 8001814:	00d2      	lsls	r2, r2, #3
 8001816:	21ff      	movs	r1, #255	@ 0xff
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	43d2      	mvns	r2, r2
 800181e:	401a      	ands	r2, r3
 8001820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	22ff      	movs	r2, #255	@ 0xff
 8001828:	401a      	ands	r2, r3
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	0018      	movs	r0, r3
 8001830:	2303      	movs	r3, #3
 8001832:	4003      	ands	r3, r0
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001838:	481f      	ldr	r0, [pc, #124]	@ (80018b8 <__NVIC_SetPriority+0xd4>)
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b25b      	sxtb	r3, r3
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	430a      	orrs	r2, r1
 8001844:	33c0      	adds	r3, #192	@ 0xc0
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800184a:	e031      	b.n	80018b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800184c:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <__NVIC_SetPriority+0xd8>)
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	0019      	movs	r1, r3
 8001854:	230f      	movs	r3, #15
 8001856:	400b      	ands	r3, r1
 8001858:	3b08      	subs	r3, #8
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3306      	adds	r3, #6
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1dfa      	adds	r2, r7, #7
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	0011      	movs	r1, r2
 800186c:	2203      	movs	r2, #3
 800186e:	400a      	ands	r2, r1
 8001870:	00d2      	lsls	r2, r2, #3
 8001872:	21ff      	movs	r1, #255	@ 0xff
 8001874:	4091      	lsls	r1, r2
 8001876:	000a      	movs	r2, r1
 8001878:	43d2      	mvns	r2, r2
 800187a:	401a      	ands	r2, r3
 800187c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	22ff      	movs	r2, #255	@ 0xff
 8001884:	401a      	ands	r2, r3
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	0018      	movs	r0, r3
 800188c:	2303      	movs	r3, #3
 800188e:	4003      	ands	r3, r0
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001894:	4809      	ldr	r0, [pc, #36]	@ (80018bc <__NVIC_SetPriority+0xd8>)
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	001c      	movs	r4, r3
 800189c:	230f      	movs	r3, #15
 800189e:	4023      	ands	r3, r4
 80018a0:	3b08      	subs	r3, #8
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	430a      	orrs	r2, r1
 80018a6:	3306      	adds	r3, #6
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	18c3      	adds	r3, r0, r3
 80018ac:	3304      	adds	r3, #4
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b003      	add	sp, #12
 80018b6:	bd90      	pop	{r4, r7, pc}
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	1e5a      	subs	r2, r3, #1
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	045b      	lsls	r3, r3, #17
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d301      	bcc.n	80018d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d4:	2301      	movs	r3, #1
 80018d6:	e010      	b.n	80018fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <SysTick_Config+0x44>)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	3a01      	subs	r2, #1
 80018de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e0:	2301      	movs	r3, #1
 80018e2:	425b      	negs	r3, r3
 80018e4:	2103      	movs	r1, #3
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff ff7c 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <SysTick_Config+0x44>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <SysTick_Config+0x44>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	210f      	movs	r1, #15
 8001914:	187b      	adds	r3, r7, r1
 8001916:	1c02      	adds	r2, r0, #0
 8001918:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	187b      	adds	r3, r7, r1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b25b      	sxtb	r3, r3
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	0002      	movs	r2, r0
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b25b      	sxtb	r3, r3
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff ff33 	bl	80017b0 <__NVIC_EnableIRQ>
}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b002      	add	sp, #8
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff ffaf 	bl	80018c0 <SysTick_Config>
 8001962:	0003      	movs	r3, r0
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e015      	b.n	80019aa <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	791b      	ldrb	r3, [r3, #4]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d106      	bne.n	8001996 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff fa91 	bl	8000eb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b002      	add	sp, #8
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	795b      	ldrb	r3, [r3, #5]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_DAC_ConfigChannel+0x20>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e035      	b.n	8001a40 <HAL_DAC_ConfigChannel+0x8c>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2202      	movs	r2, #2
 80019de:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80019e8:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <HAL_DAC_ConfigChannel+0x94>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	409a      	lsls	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	43da      	mvns	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	21c0      	movs	r1, #192	@ 0xc0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4099      	lsls	r1, r3
 8001a26:	000b      	movs	r3, r1
 8001a28:	43d9      	mvns	r1, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	400a      	ands	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b006      	add	sp, #24
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	00000ffe 	.word	0x00000ffe

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a62:	e14f      	b.n	8001d04 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4091      	lsls	r1, r2
 8001a6e:	000a      	movs	r2, r1
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d100      	bne.n	8001a7c <HAL_GPIO_Init+0x30>
 8001a7a:	e140      	b.n	8001cfe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d130      	bne.n	8001af6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	0013      	movs	r3, r2
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aca:	2201      	movs	r2, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d017      	beq.n	8001b32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	0013      	movs	r3, r2
 8001b12:	43da      	mvns	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	409a      	lsls	r2, r3
 8001b24:	0013      	movs	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d123      	bne.n	8001b86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	08da      	lsrs	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	58d3      	ldr	r3, [r2, r3]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2207      	movs	r2, #7
 8001b50:	4013      	ands	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2107      	movs	r1, #7
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	6939      	ldr	r1, [r7, #16]
 8001b84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	409a      	lsls	r2, r3
 8001b94:	0013      	movs	r3, r2
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d100      	bne.n	8001bc8 <HAL_GPIO_Init+0x17c>
 8001bc6:	e09a      	b.n	8001cfe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc8:	4b54      	ldr	r3, [pc, #336]	@ (8001d1c <HAL_GPIO_Init+0x2d0>)
 8001bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bcc:	4b53      	ldr	r3, [pc, #332]	@ (8001d1c <HAL_GPIO_Init+0x2d0>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd4:	4a52      	ldr	r2, [pc, #328]	@ (8001d20 <HAL_GPIO_Init+0x2d4>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	589b      	ldr	r3, [r3, r2]
 8001be0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	23a0      	movs	r3, #160	@ 0xa0
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x1ea>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a47      	ldr	r2, [pc, #284]	@ (8001d24 <HAL_GPIO_Init+0x2d8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x1e6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a46      	ldr	r2, [pc, #280]	@ (8001d28 <HAL_GPIO_Init+0x2dc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a45      	ldr	r2, [pc, #276]	@ (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x1de>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a44      	ldr	r2, [pc, #272]	@ (8001d30 <HAL_GPIO_Init+0x2e4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x1da>
 8001c22:	2305      	movs	r3, #5
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x1ec>
 8001c26:	2306      	movs	r3, #6
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x1ec>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x1ec>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x1ec>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x1ec>
 8001c36:	2300      	movs	r3, #0
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	2103      	movs	r1, #3
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c48:	4935      	ldr	r1, [pc, #212]	@ (8001d20 <HAL_GPIO_Init+0x2d4>)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c56:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	025b      	lsls	r3, r3, #9
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c80:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	2380      	movs	r3, #128	@ 0x80
 8001c96:	029b      	lsls	r3, r3, #10
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	2380      	movs	r3, #128	@ 0x80
 8001cc0:	035b      	lsls	r3, r3, #13
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	039b      	lsls	r3, r3, #14
 8001cec:	4013      	ands	r3, r2
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	40da      	lsrs	r2, r3
 8001d0c:	1e13      	subs	r3, r2, #0
 8001d0e:	d000      	beq.n	8001d12 <HAL_GPIO_Init+0x2c6>
 8001d10:	e6a8      	b.n	8001a64 <HAL_GPIO_Init+0x18>
  }
}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b006      	add	sp, #24
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	50000400 	.word	0x50000400
 8001d28:	50000800 	.word	0x50000800
 8001d2c:	50000c00 	.word	0x50000c00
 8001d30:	50001c00 	.word	0x50001c00
 8001d34:	40010400 	.word	0x40010400

08001d38 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	000a      	movs	r2, r1
 8001d42:	1cbb      	adds	r3, r7, #2
 8001d44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	1cba      	adds	r2, r7, #2
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d52:	230f      	movs	r3, #15
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e003      	b.n	8001d64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d64:	230f      	movs	r3, #15
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	781b      	ldrb	r3, [r3, #0]
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b004      	add	sp, #16
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	0008      	movs	r0, r1
 8001d7c:	0011      	movs	r1, r2
 8001d7e:	1cbb      	adds	r3, r7, #2
 8001d80:	1c02      	adds	r2, r0, #0
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	1c7b      	adds	r3, r7, #1
 8001d86:	1c0a      	adds	r2, r1, #0
 8001d88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8a:	1c7b      	adds	r3, r7, #1
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	1cbb      	adds	r3, r7, #2
 8001d94:	881a      	ldrh	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001d9a:	e003      	b.n	8001da4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001d9c:	1cbb      	adds	r3, r7, #2
 8001d9e:	881a      	ldrh	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001da4:	46c0      	nop			@ (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	0002      	movs	r2, r0
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	1dba      	adds	r2, r7, #6
 8001dbe:	8812      	ldrh	r2, [r2, #0]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d008      	beq.n	8001dd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001dc6:	1dba      	adds	r2, r7, #6
 8001dc8:	8812      	ldrh	r2, [r2, #0]
 8001dca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	1dbb      	adds	r3, r7, #6
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7fe fc0b 	bl	80005ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e082      	b.n	8001efc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2241      	movs	r2, #65	@ 0x41
 8001dfa:	5c9b      	ldrb	r3, [r3, r2]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2240      	movs	r2, #64	@ 0x40
 8001e06:	2100      	movs	r1, #0
 8001e08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff f88f 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2241      	movs	r2, #65	@ 0x41
 8001e16:	2124      	movs	r1, #36	@ 0x24
 8001e18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	438a      	bics	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4934      	ldr	r1, [pc, #208]	@ (8001f04 <HAL_I2C_Init+0x120>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4931      	ldr	r1, [pc, #196]	@ (8001f08 <HAL_I2C_Init+0x124>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d108      	bne.n	8001e62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	0209      	lsls	r1, r1, #8
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e007      	b.n	8001e72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2184      	movs	r1, #132	@ 0x84
 8001e6c:	0209      	lsls	r1, r1, #8
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d104      	bne.n	8001e84 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2280      	movs	r2, #128	@ 0x80
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	491f      	ldr	r1, [pc, #124]	@ (8001f0c <HAL_I2C_Init+0x128>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	491a      	ldr	r1, [pc, #104]	@ (8001f08 <HAL_I2C_Init+0x124>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69d9      	ldr	r1, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2241      	movs	r2, #65	@ 0x41
 8001ee8:	2120      	movs	r1, #32
 8001eea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2242      	movs	r2, #66	@ 0x42
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	f0ffffff 	.word	0xf0ffffff
 8001f08:	ffff7fff 	.word	0xffff7fff
 8001f0c:	02008000 	.word	0x02008000

08001f10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b089      	sub	sp, #36	@ 0x24
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	0008      	movs	r0, r1
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	230a      	movs	r3, #10
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	1c02      	adds	r2, r0, #0
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	2308      	movs	r3, #8
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	1c0a      	adds	r2, r1, #0
 8001f2c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2241      	movs	r2, #65	@ 0x41
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d000      	beq.n	8001f3c <HAL_I2C_Master_Transmit+0x2c>
 8001f3a:	e0e7      	b.n	800210c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2240      	movs	r2, #64	@ 0x40
 8001f40:	5c9b      	ldrb	r3, [r3, r2]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_I2C_Master_Transmit+0x3a>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e0e1      	b.n	800210e <HAL_I2C_Master_Transmit+0x1fe>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2240      	movs	r2, #64	@ 0x40
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f52:	f7ff f9e5 	bl	8001320 <HAL_GetTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	0219      	lsls	r1, r3, #8
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2319      	movs	r3, #25
 8001f66:	2201      	movs	r2, #1
 8001f68:	f000 f8fc 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0cc      	b.n	800210e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2241      	movs	r2, #65	@ 0x41
 8001f78:	2121      	movs	r1, #33	@ 0x21
 8001f7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2242      	movs	r2, #66	@ 0x42
 8001f80:	2110      	movs	r1, #16
 8001f82:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2208      	movs	r2, #8
 8001f94:	18ba      	adds	r2, r7, r2
 8001f96:	8812      	ldrh	r2, [r2, #0]
 8001f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2bff      	cmp	r3, #255	@ 0xff
 8001fa8:	d911      	bls.n	8001fce <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	22ff      	movs	r2, #255	@ 0xff
 8001fae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	045c      	lsls	r4, r3, #17
 8001fba:	230a      	movs	r3, #10
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	8819      	ldrh	r1, [r3, #0]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	4b55      	ldr	r3, [pc, #340]	@ (8002118 <HAL_I2C_Master_Transmit+0x208>)
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	0023      	movs	r3, r4
 8001fc8:	f000 fa00 	bl	80023cc <I2C_TransferConfig>
 8001fcc:	e075      	b.n	80020ba <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	049c      	lsls	r4, r3, #18
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	8819      	ldrh	r1, [r3, #0]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	4b4b      	ldr	r3, [pc, #300]	@ (8002118 <HAL_I2C_Master_Transmit+0x208>)
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	0023      	movs	r3, r4
 8001ff0:	f000 f9ec 	bl	80023cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ff4:	e061      	b.n	80020ba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 f8f0 	bl	80021e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e081      	b.n	800210e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d03a      	beq.n	80020ba <HAL_I2C_Master_Transmit+0x1aa>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d136      	bne.n	80020ba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800204c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	0013      	movs	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	2180      	movs	r1, #128	@ 0x80
 800205a:	f000 f883 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 800205e:	1e03      	subs	r3, r0, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e053      	b.n	800210e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2bff      	cmp	r3, #255	@ 0xff
 800206e:	d911      	bls.n	8002094 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	22ff      	movs	r2, #255	@ 0xff
 8002074:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207a:	b2da      	uxtb	r2, r3
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	045c      	lsls	r4, r3, #17
 8002080:	230a      	movs	r3, #10
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	8819      	ldrh	r1, [r3, #0]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	0023      	movs	r3, r4
 800208e:	f000 f99d 	bl	80023cc <I2C_TransferConfig>
 8002092:	e012      	b.n	80020ba <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	049c      	lsls	r4, r3, #18
 80020a8:	230a      	movs	r3, #10
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	8819      	ldrh	r1, [r3, #0]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	0023      	movs	r3, r4
 80020b6:	f000 f989 	bl	80023cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d198      	bne.n	8001ff6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 f8c8 	bl	8002260 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e01a      	b.n	800210e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2220      	movs	r2, #32
 80020de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	490c      	ldr	r1, [pc, #48]	@ (800211c <HAL_I2C_Master_Transmit+0x20c>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2241      	movs	r2, #65	@ 0x41
 80020f4:	2120      	movs	r1, #32
 80020f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2242      	movs	r2, #66	@ 0x42
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2240      	movs	r2, #64	@ 0x40
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b007      	add	sp, #28
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	80002000 	.word	0x80002000
 800211c:	fe00e800 	.word	0xfe00e800

08002120 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d103      	bne.n	800213e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2201      	movs	r2, #1
 8002146:	4013      	ands	r3, r2
 8002148:	2b01      	cmp	r3, #1
 800214a:	d007      	beq.n	800215c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2101      	movs	r1, #1
 8002158:	430a      	orrs	r2, r1
 800215a:	619a      	str	r2, [r3, #24]
  }
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}

08002164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	1dfb      	adds	r3, r7, #7
 8002172:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002174:	e021      	b.n	80021ba <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	d01e      	beq.n	80021ba <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217c:	f7ff f8d0 	bl	8001320 <HAL_GetTick>
 8002180:	0002      	movs	r2, r0
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d302      	bcc.n	8002192 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d113      	bne.n	80021ba <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	2220      	movs	r2, #32
 8002198:	431a      	orrs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2241      	movs	r2, #65	@ 0x41
 80021a2:	2120      	movs	r1, #32
 80021a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2242      	movs	r2, #66	@ 0x42
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2240      	movs	r2, #64	@ 0x40
 80021b2:	2100      	movs	r1, #0
 80021b4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	4013      	ands	r3, r2
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	425a      	negs	r2, r3
 80021ca:	4153      	adcs	r3, r2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	001a      	movs	r2, r3
 80021d0:	1dfb      	adds	r3, r7, #7
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d0ce      	beq.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021ee:	e02b      	b.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	0018      	movs	r0, r3
 80021f8:	f000 f86e 	bl	80022d8 <I2C_IsAcknowledgeFailed>
 80021fc:	1e03      	subs	r3, r0, #0
 80021fe:	d001      	beq.n	8002204 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e029      	b.n	8002258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3301      	adds	r3, #1
 8002208:	d01e      	beq.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7ff f889 	bl	8001320 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d113      	bne.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002224:	2220      	movs	r2, #32
 8002226:	431a      	orrs	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2241      	movs	r2, #65	@ 0x41
 8002230:	2120      	movs	r1, #32
 8002232:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2242      	movs	r2, #66	@ 0x42
 8002238:	2100      	movs	r1, #0
 800223a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2240      	movs	r2, #64	@ 0x40
 8002240:	2100      	movs	r1, #0
 8002242:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e007      	b.n	8002258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d1cc      	bne.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}

08002260 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800226c:	e028      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0018      	movs	r0, r3
 8002276:	f000 f82f 	bl	80022d8 <I2C_IsAcknowledgeFailed>
 800227a:	1e03      	subs	r3, r0, #0
 800227c:	d001      	beq.n	8002282 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e026      	b.n	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7ff f84d 	bl	8001320 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d113      	bne.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229c:	2220      	movs	r2, #32
 800229e:	431a      	orrs	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2241      	movs	r2, #65	@ 0x41
 80022a8:	2120      	movs	r1, #32
 80022aa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2242      	movs	r2, #66	@ 0x42
 80022b0:	2100      	movs	r1, #0
 80022b2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	2100      	movs	r1, #0
 80022ba:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e007      	b.n	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2220      	movs	r2, #32
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d1cf      	bne.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2210      	movs	r2, #16
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d164      	bne.n	80023bc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	049b      	lsls	r3, r3, #18
 80022fc:	401a      	ands	r2, r3
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	049b      	lsls	r3, r3, #18
 8002302:	429a      	cmp	r2, r3
 8002304:	d02b      	beq.n	800235e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	01c9      	lsls	r1, r1, #7
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002318:	e021      	b.n	800235e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3301      	adds	r3, #1
 800231e:	d01e      	beq.n	800235e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002320:	f7fe fffe 	bl	8001320 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	d302      	bcc.n	8002336 <I2C_IsAcknowledgeFailed+0x5e>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	2220      	movs	r2, #32
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2241      	movs	r2, #65	@ 0x41
 8002346:	2120      	movs	r1, #32
 8002348:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2242      	movs	r2, #66	@ 0x42
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2240      	movs	r2, #64	@ 0x40
 8002356:	2100      	movs	r1, #0
 8002358:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e02f      	b.n	80023be <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2220      	movs	r2, #32
 8002366:	4013      	ands	r3, r2
 8002368:	2b20      	cmp	r3, #32
 800236a:	d1d6      	bne.n	800231a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2210      	movs	r2, #16
 8002372:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2220      	movs	r2, #32
 800237a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	0018      	movs	r0, r3
 8002380:	f7ff fece 	bl	8002120 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	490e      	ldr	r1, [pc, #56]	@ (80023c8 <I2C_IsAcknowledgeFailed+0xf0>)
 8002390:	400a      	ands	r2, r1
 8002392:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002398:	2204      	movs	r2, #4
 800239a:	431a      	orrs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2241      	movs	r2, #65	@ 0x41
 80023a4:	2120      	movs	r1, #32
 80023a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2242      	movs	r2, #66	@ 0x42
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2240      	movs	r2, #64	@ 0x40
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	fe00e800 	.word	0xfe00e800

080023cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	0008      	movs	r0, r1
 80023d6:	0011      	movs	r1, r2
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	240a      	movs	r4, #10
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	1c02      	adds	r2, r0, #0
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	2009      	movs	r0, #9
 80023e4:	183b      	adds	r3, r7, r0
 80023e6:	1c0a      	adds	r2, r1, #0
 80023e8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	0d51      	lsrs	r1, r2, #21
 80023f4:	2280      	movs	r2, #128	@ 0x80
 80023f6:	00d2      	lsls	r2, r2, #3
 80023f8:	400a      	ands	r2, r1
 80023fa:	490e      	ldr	r1, [pc, #56]	@ (8002434 <I2C_TransferConfig+0x68>)
 80023fc:	430a      	orrs	r2, r1
 80023fe:	43d2      	mvns	r2, r2
 8002400:	401a      	ands	r2, r3
 8002402:	0011      	movs	r1, r2
 8002404:	193b      	adds	r3, r7, r4
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	059b      	lsls	r3, r3, #22
 800240a:	0d9a      	lsrs	r2, r3, #22
 800240c:	183b      	adds	r3, r7, r0
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	0418      	lsls	r0, r3, #16
 8002412:	23ff      	movs	r3, #255	@ 0xff
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	4003      	ands	r3, r0
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	431a      	orrs	r2, r3
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	431a      	orrs	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b005      	add	sp, #20
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	03ff63ff 	.word	0x03ff63ff

08002438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	@ 0x41
 8002446:	5c9b      	ldrb	r3, [r3, r2]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b20      	cmp	r3, #32
 800244c:	d138      	bne.n	80024c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002458:	2302      	movs	r3, #2
 800245a:	e032      	b.n	80024c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	2101      	movs	r1, #1
 8002462:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2241      	movs	r2, #65	@ 0x41
 8002468:	2124      	movs	r1, #36	@ 0x24
 800246a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4911      	ldr	r1, [pc, #68]	@ (80024cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6819      	ldr	r1, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2101      	movs	r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2241      	movs	r2, #65	@ 0x41
 80024b0:	2120      	movs	r1, #32
 80024b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2240      	movs	r2, #64	@ 0x40
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b002      	add	sp, #8
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	ffffefff 	.word	0xffffefff

080024d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2241      	movs	r2, #65	@ 0x41
 80024de:	5c9b      	ldrb	r3, [r3, r2]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d139      	bne.n	800255a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2240      	movs	r2, #64	@ 0x40
 80024ea:	5c9b      	ldrb	r3, [r3, r2]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e033      	b.n	800255c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2240      	movs	r2, #64	@ 0x40
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2241      	movs	r2, #65	@ 0x41
 8002500:	2124      	movs	r1, #36	@ 0x24
 8002502:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	438a      	bics	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a11      	ldr	r2, [pc, #68]	@ (8002564 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2241      	movs	r2, #65	@ 0x41
 800254a:	2120      	movs	r1, #32
 800254c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2240      	movs	r2, #64	@ 0x40
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
  }
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b004      	add	sp, #16
 8002562:	bd80      	pop	{r7, pc}
 8002564:	fffff0ff 	.word	0xfffff0ff

08002568 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	b08b      	sub	sp, #44	@ 0x2c
 800256c:	af06      	add	r7, sp, #24
 800256e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0ff      	b.n	800277a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a81      	ldr	r2, [pc, #516]	@ (8002784 <HAL_PCD_Init+0x21c>)
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d108      	bne.n	8002598 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	23aa      	movs	r3, #170	@ 0xaa
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	2100      	movs	r1, #0
 800258e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f7fe fd66 	bl	8001064 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a7a      	ldr	r2, [pc, #488]	@ (8002784 <HAL_PCD_Init+0x21c>)
 800259c:	2103      	movs	r1, #3
 800259e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f001 fd1d 	bl	8003fe4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025aa:	230f      	movs	r3, #15
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e058      	b.n	8002666 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025b4:	200f      	movs	r0, #15
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	0013      	movs	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	189b      	adds	r3, r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	18cb      	adds	r3, r1, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025ce:	183b      	adds	r3, r7, r0
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	0013      	movs	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	189b      	adds	r3, r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	183a      	adds	r2, r7, r0
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025e4:	0004      	movs	r4, r0
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b298      	uxth	r0, r3
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	0013      	movs	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	18cb      	adds	r3, r1, r3
 80025fc:	3336      	adds	r3, #54	@ 0x36
 80025fe:	1c02      	adds	r2, r0, #0
 8002600:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002602:	193b      	adds	r3, r7, r4
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	0013      	movs	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	189b      	adds	r3, r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	18cb      	adds	r3, r1, r3
 8002614:	3303      	adds	r3, #3
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800261a:	193b      	adds	r3, r7, r4
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	0013      	movs	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	189b      	adds	r3, r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	18cb      	adds	r3, r1, r3
 800262a:	3338      	adds	r3, #56	@ 0x38
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002630:	193b      	adds	r3, r7, r4
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	0013      	movs	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	189b      	adds	r3, r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	18cb      	adds	r3, r1, r3
 8002640:	333c      	adds	r3, #60	@ 0x3c
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002646:	193b      	adds	r3, r7, r4
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	0013      	movs	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	189b      	adds	r3, r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	18cb      	adds	r3, r1, r3
 8002656:	3340      	adds	r3, #64	@ 0x40
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265c:	193b      	adds	r3, r7, r4
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	193b      	adds	r3, r7, r4
 8002662:	3201      	adds	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	210f      	movs	r1, #15
 8002668:	187b      	adds	r3, r7, r1
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	d39f      	bcc.n	80025b4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e056      	b.n	800272a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800267c:	240f      	movs	r4, #15
 800267e:	193b      	adds	r3, r7, r4
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	236a      	movs	r3, #106	@ 0x6a
 8002686:	33ff      	adds	r3, #255	@ 0xff
 8002688:	0019      	movs	r1, r3
 800268a:	0013      	movs	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	189b      	adds	r3, r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	18c3      	adds	r3, r0, r3
 8002694:	185b      	adds	r3, r3, r1
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800269a:	193b      	adds	r3, r7, r4
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	23b4      	movs	r3, #180	@ 0xb4
 80026a2:	0059      	lsls	r1, r3, #1
 80026a4:	0013      	movs	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	189b      	adds	r3, r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	18c3      	adds	r3, r0, r3
 80026ae:	185b      	adds	r3, r3, r1
 80026b0:	193a      	adds	r2, r7, r4
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	236c      	movs	r3, #108	@ 0x6c
 80026be:	33ff      	adds	r3, #255	@ 0xff
 80026c0:	0019      	movs	r1, r3
 80026c2:	0013      	movs	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	189b      	adds	r3, r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	18c3      	adds	r3, r0, r3
 80026cc:	185b      	adds	r3, r3, r1
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	23bc      	movs	r3, #188	@ 0xbc
 80026da:	0059      	lsls	r1, r3, #1
 80026dc:	0013      	movs	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	189b      	adds	r3, r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	18c3      	adds	r3, r0, r3
 80026e6:	185b      	adds	r3, r3, r1
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	23be      	movs	r3, #190	@ 0xbe
 80026f4:	0059      	lsls	r1, r3, #1
 80026f6:	0013      	movs	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	189b      	adds	r3, r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	18c3      	adds	r3, r0, r3
 8002700:	185b      	adds	r3, r3, r1
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002706:	193b      	adds	r3, r7, r4
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	23c0      	movs	r3, #192	@ 0xc0
 800270e:	0059      	lsls	r1, r3, #1
 8002710:	0013      	movs	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	189b      	adds	r3, r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	18c3      	adds	r3, r0, r3
 800271a:	185b      	adds	r3, r3, r1
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002720:	193b      	adds	r3, r7, r4
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	193b      	adds	r3, r7, r4
 8002726:	3201      	adds	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	230f      	movs	r3, #15
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	d3a1      	bcc.n	800267c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	466a      	mov	r2, sp
 8002740:	0011      	movs	r1, r2
 8002742:	001a      	movs	r2, r3
 8002744:	3210      	adds	r2, #16
 8002746:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002748:	c170      	stmia	r1!, {r4, r5, r6}
 800274a:	ca30      	ldmia	r2!, {r4, r5}
 800274c:	c130      	stmia	r1!, {r4, r5}
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f001 fc60 	bl	8004018 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2224      	movs	r2, #36	@ 0x24
 800275c:	2100      	movs	r1, #0
 800275e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a08      	ldr	r2, [pc, #32]	@ (8002784 <HAL_PCD_Init+0x21c>)
 8002764:	2101      	movs	r1, #1
 8002766:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d103      	bne.n	8002778 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f808 	bl	8002788 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b005      	add	sp, #20
 8002780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	000002a9 	.word	0x000002a9

08002788 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	23ba      	movs	r3, #186	@ 0xba
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	2101      	movs	r1, #1
 800279e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	23b8      	movs	r3, #184	@ 0xb8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	2100      	movs	r1, #0
 80027a8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2254      	movs	r2, #84	@ 0x54
 80027ae:	5a9b      	ldrh	r3, [r3, r2]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2201      	movs	r2, #1
 80027b4:	4313      	orrs	r3, r2
 80027b6:	b299      	uxth	r1, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2254      	movs	r2, #84	@ 0x54
 80027bc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2254      	movs	r2, #84	@ 0x54
 80027c2:	5a9b      	ldrh	r3, [r3, r2]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2202      	movs	r2, #2
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b299      	uxth	r1, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2254      	movs	r2, #84	@ 0x54
 80027d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b5b0      	push	{r4, r5, r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f000 fbaf 	bl	8002f4e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f0:	4bcf      	ldr	r3, [pc, #828]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	220c      	movs	r2, #12
 80027f6:	4013      	ands	r3, r2
 80027f8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027fa:	4bcd      	ldr	r3, [pc, #820]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	025b      	lsls	r3, r3, #9
 8002802:	4013      	ands	r3, r2
 8002804:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d100      	bne.n	8002812 <HAL_RCC_OscConfig+0x36>
 8002810:	e07e      	b.n	8002910 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d007      	beq.n	8002828 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d112      	bne.n	8002844 <HAL_RCC_OscConfig+0x68>
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	025b      	lsls	r3, r3, #9
 8002824:	429a      	cmp	r2, r3
 8002826:	d10d      	bne.n	8002844 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4bc1      	ldr	r3, [pc, #772]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	4013      	ands	r3, r2
 8002832:	d100      	bne.n	8002836 <HAL_RCC_OscConfig+0x5a>
 8002834:	e06b      	b.n	800290e <HAL_RCC_OscConfig+0x132>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d167      	bne.n	800290e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	f000 fb85 	bl	8002f4e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	429a      	cmp	r2, r3
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x84>
 8002850:	4bb7      	ldr	r3, [pc, #732]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4bb6      	ldr	r3, [pc, #728]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	0249      	lsls	r1, r1, #9
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e027      	b.n	80028b0 <HAL_RCC_OscConfig+0xd4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	23a0      	movs	r3, #160	@ 0xa0
 8002866:	02db      	lsls	r3, r3, #11
 8002868:	429a      	cmp	r2, r3
 800286a:	d10e      	bne.n	800288a <HAL_RCC_OscConfig+0xae>
 800286c:	4bb0      	ldr	r3, [pc, #704]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4baf      	ldr	r3, [pc, #700]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002872:	2180      	movs	r1, #128	@ 0x80
 8002874:	02c9      	lsls	r1, r1, #11
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	4bad      	ldr	r3, [pc, #692]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4bac      	ldr	r3, [pc, #688]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002880:	2180      	movs	r1, #128	@ 0x80
 8002882:	0249      	lsls	r1, r1, #9
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e012      	b.n	80028b0 <HAL_RCC_OscConfig+0xd4>
 800288a:	4ba9      	ldr	r3, [pc, #676]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4ba8      	ldr	r3, [pc, #672]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002890:	49a8      	ldr	r1, [pc, #672]	@ (8002b34 <HAL_RCC_OscConfig+0x358>)
 8002892:	400a      	ands	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	4ba6      	ldr	r3, [pc, #664]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	025b      	lsls	r3, r3, #9
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4ba2      	ldr	r3, [pc, #648]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4ba1      	ldr	r3, [pc, #644]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80028aa:	49a3      	ldr	r1, [pc, #652]	@ (8002b38 <HAL_RCC_OscConfig+0x35c>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fd32 	bl	8001320 <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028c0:	e009      	b.n	80028d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c2:	f7fe fd2d 	bl	8001320 <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b64      	cmp	r3, #100	@ 0x64
 80028ce:	d902      	bls.n	80028d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	f000 fb3c 	bl	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028d6:	4b96      	ldr	r3, [pc, #600]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	@ 0x80
 80028dc:	029b      	lsls	r3, r3, #10
 80028de:	4013      	ands	r3, r2
 80028e0:	d0ef      	beq.n	80028c2 <HAL_RCC_OscConfig+0xe6>
 80028e2:	e015      	b.n	8002910 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fd1c 	bl	8001320 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ee:	f7fe fd17 	bl	8001320 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	@ 0x64
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e326      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002900:	4b8b      	ldr	r3, [pc, #556]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	4013      	ands	r3, r2
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x112>
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2202      	movs	r2, #2
 8002916:	4013      	ands	r3, r2
 8002918:	d100      	bne.n	800291c <HAL_RCC_OscConfig+0x140>
 800291a:	e08b      	b.n	8002a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d005      	beq.n	8002934 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d13e      	bne.n	80029ac <HAL_RCC_OscConfig+0x1d0>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d13b      	bne.n	80029ac <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002934:	4b7e      	ldr	r3, [pc, #504]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2204      	movs	r2, #4
 800293a:	4013      	ands	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_RCC_OscConfig+0x16c>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e302      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	4b79      	ldr	r3, [pc, #484]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a7b      	ldr	r2, [pc, #492]	@ (8002b3c <HAL_RCC_OscConfig+0x360>)
 800294e:	4013      	ands	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	021a      	lsls	r2, r3, #8
 8002958:	4b75      	ldr	r3, [pc, #468]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800295e:	4b74      	ldr	r3, [pc, #464]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2209      	movs	r2, #9
 8002964:	4393      	bics	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	4b71      	ldr	r3, [pc, #452]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002970:	f000 fc40 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8002974:	0001      	movs	r1, r0
 8002976:	4b6e      	ldr	r3, [pc, #440]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	220f      	movs	r2, #15
 800297e:	4013      	ands	r3, r2
 8002980:	4a6f      	ldr	r2, [pc, #444]	@ (8002b40 <HAL_RCC_OscConfig+0x364>)
 8002982:	5cd3      	ldrb	r3, [r2, r3]
 8002984:	000a      	movs	r2, r1
 8002986:	40da      	lsrs	r2, r3
 8002988:	4b6e      	ldr	r3, [pc, #440]	@ (8002b44 <HAL_RCC_OscConfig+0x368>)
 800298a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800298c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b48 <HAL_RCC_OscConfig+0x36c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2513      	movs	r5, #19
 8002992:	197c      	adds	r4, r7, r5
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe fc7d 	bl	8001294 <HAL_InitTick>
 800299a:	0003      	movs	r3, r0
 800299c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800299e:	197b      	adds	r3, r7, r5
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d046      	beq.n	8002a34 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80029a6:	197b      	adds	r3, r7, r5
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	e2d0      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d027      	beq.n	8002a02 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2209      	movs	r2, #9
 80029b8:	4393      	bics	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	4b5c      	ldr	r3, [pc, #368]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe fcac 	bl	8001320 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fe fca7 	bl	8001320 <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e2b6      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e0:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2204      	movs	r2, #4
 80029e6:	4013      	ands	r3, r2
 80029e8:	d0f1      	beq.n	80029ce <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b51      	ldr	r3, [pc, #324]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4a53      	ldr	r2, [pc, #332]	@ (8002b3c <HAL_RCC_OscConfig+0x360>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	021a      	lsls	r2, r3, #8
 80029fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	e018      	b.n	8002a34 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a02:	4b4b      	ldr	r3, [pc, #300]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a08:	2101      	movs	r1, #1
 8002a0a:	438a      	bics	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fc87 	bl	8001320 <HAL_GetTick>
 8002a12:	0003      	movs	r3, r0
 8002a14:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a18:	f7fe fc82 	bl	8001320 <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e291      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a2a:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	4013      	ands	r3, r2
 8002a32:	d1f1      	bne.n	8002a18 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d100      	bne.n	8002a40 <HAL_RCC_OscConfig+0x264>
 8002a3e:	e0a1      	b.n	8002b84 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d140      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a46:	4b3a      	ldr	r3, [pc, #232]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d005      	beq.n	8002a5e <HAL_RCC_OscConfig+0x282>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e277      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5e:	4b34      	ldr	r3, [pc, #208]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a3a      	ldr	r2, [pc, #232]	@ (8002b4c <HAL_RCC_OscConfig+0x370>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a6c:	4b30      	ldr	r3, [pc, #192]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a72:	4b2f      	ldr	r3, [pc, #188]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	0a19      	lsrs	r1, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	061a      	lsls	r2, r3, #24
 8002a80:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	0b5b      	lsrs	r3, r3, #13
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	2280      	movs	r2, #128	@ 0x80
 8002a90:	0212      	lsls	r2, r2, #8
 8002a92:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a94:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	4928      	ldr	r1, [pc, #160]	@ (8002b40 <HAL_RCC_OscConfig+0x364>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002aa4:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <HAL_RCC_OscConfig+0x368>)
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002aa8:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <HAL_RCC_OscConfig+0x36c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2513      	movs	r5, #19
 8002aae:	197c      	adds	r4, r7, r5
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fe fbef 	bl	8001294 <HAL_InitTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002aba:	197b      	adds	r3, r7, r5
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d060      	beq.n	8002b84 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002ac2:	197b      	adds	r3, r7, r5
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	e242      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d03f      	beq.n	8002b50 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ad0:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002ad6:	2180      	movs	r1, #128	@ 0x80
 8002ad8:	0049      	lsls	r1, r1, #1
 8002ada:	430a      	orrs	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fc1f 	bl	8001320 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fc1a 	bl	8001320 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e229      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4013      	ands	r3, r2
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a10      	ldr	r2, [pc, #64]	@ (8002b4c <HAL_RCC_OscConfig+0x370>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1a:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	0a19      	lsrs	r1, r3, #8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	061a      	lsls	r2, r3, #24
 8002b28:	4b01      	ldr	r3, [pc, #4]	@ (8002b30 <HAL_RCC_OscConfig+0x354>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	e029      	b.n	8002b84 <HAL_RCC_OscConfig+0x3a8>
 8002b30:	40021000 	.word	0x40021000
 8002b34:	fffeffff 	.word	0xfffeffff
 8002b38:	fffbffff 	.word	0xfffbffff
 8002b3c:	ffffe0ff 	.word	0xffffe0ff
 8002b40:	080049e8 	.word	0x080049e8
 8002b44:	20000014 	.word	0x20000014
 8002b48:	20000018 	.word	0x20000018
 8002b4c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b50:	4bbd      	ldr	r3, [pc, #756]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4bbc      	ldr	r3, [pc, #752]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002b56:	49bd      	ldr	r1, [pc, #756]	@ (8002e4c <HAL_RCC_OscConfig+0x670>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fbe0 	bl	8001320 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b66:	f7fe fbdb 	bl	8001320 <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1ea      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b78:	4bb3      	ldr	r3, [pc, #716]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4013      	ands	r3, r2
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d036      	beq.n	8002bfc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d019      	beq.n	8002bca <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4bac      	ldr	r3, [pc, #688]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b9a:	4bab      	ldr	r3, [pc, #684]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fbbd 	bl	8001320 <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe fbb8 	bl	8001320 <HAL_GetTick>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1c7      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bbe:	4ba2      	ldr	r3, [pc, #648]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d0f1      	beq.n	8002bac <HAL_RCC_OscConfig+0x3d0>
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bca:	4b9f      	ldr	r3, [pc, #636]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002bcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bce:	4b9e      	ldr	r3, [pc, #632]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fba3 	bl	8001320 <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be0:	f7fe fb9e 	bl	8001320 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1ad      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bf2:	4b95      	ldr	r3, [pc, #596]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d1f1      	bne.n	8002be0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d100      	bne.n	8002c08 <HAL_RCC_OscConfig+0x42c>
 8002c06:	e0ae      	b.n	8002d66 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c08:	2027      	movs	r0, #39	@ 0x27
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c10:	4b8d      	ldr	r3, [pc, #564]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	055b      	lsls	r3, r3, #21
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d109      	bne.n	8002c30 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c20:	4b89      	ldr	r3, [pc, #548]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002c22:	2180      	movs	r1, #128	@ 0x80
 8002c24:	0549      	lsls	r1, r1, #21
 8002c26:	430a      	orrs	r2, r1
 8002c28:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002c2a:	183b      	adds	r3, r7, r0
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b87      	ldr	r3, [pc, #540]	@ (8002e50 <HAL_RCC_OscConfig+0x674>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d11a      	bne.n	8002c72 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3c:	4b84      	ldr	r3, [pc, #528]	@ (8002e50 <HAL_RCC_OscConfig+0x674>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b83      	ldr	r3, [pc, #524]	@ (8002e50 <HAL_RCC_OscConfig+0x674>)
 8002c42:	2180      	movs	r1, #128	@ 0x80
 8002c44:	0049      	lsls	r1, r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fb69 	bl	8001320 <HAL_GetTick>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fb64 	bl	8001320 <HAL_GetTick>
 8002c58:	0002      	movs	r2, r0
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	@ 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e173      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b7a      	ldr	r3, [pc, #488]	@ (8002e50 <HAL_RCC_OscConfig+0x674>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	2380      	movs	r3, #128	@ 0x80
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_OscConfig+0x4b2>
 8002c7e:	4b72      	ldr	r3, [pc, #456]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c82:	4b71      	ldr	r3, [pc, #452]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002c84:	2180      	movs	r1, #128	@ 0x80
 8002c86:	0049      	lsls	r1, r1, #1
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c8c:	e031      	b.n	8002cf2 <HAL_RCC_OscConfig+0x516>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4d4>
 8002c96:	4b6c      	ldr	r3, [pc, #432]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002c98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002c9c:	496b      	ldr	r1, [pc, #428]	@ (8002e4c <HAL_RCC_OscConfig+0x670>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ca2:	4b69      	ldr	r3, [pc, #420]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002ca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca6:	4b68      	ldr	r3, [pc, #416]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002ca8:	496a      	ldr	r1, [pc, #424]	@ (8002e54 <HAL_RCC_OscConfig+0x678>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cae:	e020      	b.n	8002cf2 <HAL_RCC_OscConfig+0x516>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	23a0      	movs	r3, #160	@ 0xa0
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d10e      	bne.n	8002cda <HAL_RCC_OscConfig+0x4fe>
 8002cbc:	4b62      	ldr	r3, [pc, #392]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002cbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cc0:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002cc2:	2180      	movs	r1, #128	@ 0x80
 8002cc4:	00c9      	lsls	r1, r1, #3
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cca:	4b5f      	ldr	r3, [pc, #380]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002ccc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cce:	4b5e      	ldr	r3, [pc, #376]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002cd0:	2180      	movs	r1, #128	@ 0x80
 8002cd2:	0049      	lsls	r1, r1, #1
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cd8:	e00b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x516>
 8002cda:	4b5b      	ldr	r3, [pc, #364]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002cdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cde:	4b5a      	ldr	r3, [pc, #360]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002ce0:	495a      	ldr	r1, [pc, #360]	@ (8002e4c <HAL_RCC_OscConfig+0x670>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ce6:	4b58      	ldr	r3, [pc, #352]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002ce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cea:	4b57      	ldr	r3, [pc, #348]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002cec:	4959      	ldr	r1, [pc, #356]	@ (8002e54 <HAL_RCC_OscConfig+0x678>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d015      	beq.n	8002d26 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fb11 	bl	8001320 <HAL_GetTick>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d02:	e009      	b.n	8002d18 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe fb0c 	bl	8001320 <HAL_GetTick>
 8002d08:	0002      	movs	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	4a52      	ldr	r2, [pc, #328]	@ (8002e58 <HAL_RCC_OscConfig+0x67c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e11a      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d18:	4b4b      	ldr	r3, [pc, #300]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d0ef      	beq.n	8002d04 <HAL_RCC_OscConfig+0x528>
 8002d24:	e014      	b.n	8002d50 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fe fafb 	bl	8001320 <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d2e:	e009      	b.n	8002d44 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe faf6 	bl	8001320 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	4a47      	ldr	r2, [pc, #284]	@ (8002e58 <HAL_RCC_OscConfig+0x67c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e104      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d44:	4b40      	ldr	r3, [pc, #256]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002d46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d1ef      	bne.n	8002d30 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d50:	2327      	movs	r3, #39	@ 0x27
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002d60:	493e      	ldr	r1, [pc, #248]	@ (8002e5c <HAL_RCC_OscConfig+0x680>)
 8002d62:	400a      	ands	r2, r1
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d049      	beq.n	8002e04 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d026      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d78:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4b32      	ldr	r3, [pc, #200]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	4b30      	ldr	r3, [pc, #192]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d88:	4b2f      	ldr	r3, [pc, #188]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d90:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <HAL_RCC_OscConfig+0x684>)
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	4b32      	ldr	r3, [pc, #200]	@ (8002e60 <HAL_RCC_OscConfig+0x684>)
 8002d96:	2180      	movs	r1, #128	@ 0x80
 8002d98:	0189      	lsls	r1, r1, #6
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fabf 	bl	8001320 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da8:	f7fe faba 	bl	8001320 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0c9      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dba:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d0f1      	beq.n	8002da8 <HAL_RCC_OscConfig+0x5cc>
 8002dc4:	e01e      	b.n	8002e04 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	438a      	bics	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	4b23      	ldr	r3, [pc, #140]	@ (8002e60 <HAL_RCC_OscConfig+0x684>)
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	4b22      	ldr	r3, [pc, #136]	@ (8002e60 <HAL_RCC_OscConfig+0x684>)
 8002dd8:	4922      	ldr	r1, [pc, #136]	@ (8002e64 <HAL_RCC_OscConfig+0x688>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fa9f 	bl	8001320 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de8:	f7fe fa9a 	bl	8001320 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0a9      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dfa:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4013      	ands	r3, r2
 8002e02:	d1f1      	bne.n	8002de8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d100      	bne.n	8002e0e <HAL_RCC_OscConfig+0x632>
 8002e0c:	e09e      	b.n	8002f4c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d100      	bne.n	8002e16 <HAL_RCC_OscConfig+0x63a>
 8002e14:	e077      	b.n	8002f06 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d158      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_RCC_OscConfig+0x66c>)
 8002e24:	4910      	ldr	r1, [pc, #64]	@ (8002e68 <HAL_RCC_OscConfig+0x68c>)
 8002e26:	400a      	ands	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fa79 	bl	8001320 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e32:	e01b      	b.n	8002e6c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe fa74 	bl	8001320 <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d914      	bls.n	8002e6c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e083      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	fffffeff 	.word	0xfffffeff
 8002e50:	40007000 	.word	0x40007000
 8002e54:	fffffbff 	.word	0xfffffbff
 8002e58:	00001388 	.word	0x00001388
 8002e5c:	efffffff 	.word	0xefffffff
 8002e60:	40010000 	.word	0x40010000
 8002e64:	ffffdfff 	.word	0xffffdfff
 8002e68:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	049b      	lsls	r3, r3, #18
 8002e74:	4013      	ands	r3, r2
 8002e76:	d1dd      	bne.n	8002e34 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e78:	4b37      	ldr	r3, [pc, #220]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a37      	ldr	r2, [pc, #220]	@ (8002f5c <HAL_RCC_OscConfig+0x780>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	431a      	orrs	r2, r3
 8002e92:	4b31      	ldr	r3, [pc, #196]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e98:	4b2f      	ldr	r3, [pc, #188]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	0449      	lsls	r1, r1, #17
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fa3b 	bl	8001320 <HAL_GetTick>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe fa36 	bl	8001320 <HAL_GetTick>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e045      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ec2:	4b25      	ldr	r3, [pc, #148]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	049b      	lsls	r3, r3, #18
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x6d4>
 8002ece:	e03d      	b.n	8002f4c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed0:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002ed6:	4922      	ldr	r1, [pc, #136]	@ (8002f60 <HAL_RCC_OscConfig+0x784>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe fa20 	bl	8001320 <HAL_GetTick>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe fa1b 	bl	8001320 <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e02a      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ef8:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	049b      	lsls	r3, r3, #18
 8002f00:	4013      	ands	r3, r2
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x70a>
 8002f04:	e022      	b.n	8002f4c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e01d      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	025b      	lsls	r3, r3, #9
 8002f1e:	401a      	ands	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d10f      	bne.n	8002f48 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	23f0      	movs	r3, #240	@ 0xf0
 8002f2c:	039b      	lsls	r3, r3, #14
 8002f2e:	401a      	ands	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	23c0      	movs	r3, #192	@ 0xc0
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	401a      	ands	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b00a      	add	sp, #40	@ 0x28
 8002f54:	bdb0      	pop	{r4, r5, r7, pc}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	ff02ffff 	.word	0xff02ffff
 8002f60:	feffffff 	.word	0xfeffffff

08002f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b5b0      	push	{r4, r5, r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e128      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b96      	ldr	r3, [pc, #600]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d91e      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b93      	ldr	r3, [pc, #588]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	4b90      	ldr	r3, [pc, #576]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f98:	f7fe f9c2 	bl	8001320 <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f7fe f9bd 	bl	8001320 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	4a8a      	ldr	r2, [pc, #552]	@ (80031d8 <HAL_RCC_ClockConfig+0x274>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e109      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b87      	ldr	r3, [pc, #540]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fce:	4b83      	ldr	r3, [pc, #524]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	22f0      	movs	r2, #240	@ 0xf0
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	4b7f      	ldr	r3, [pc, #508]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d100      	bne.n	8002fee <HAL_RCC_ClockConfig+0x8a>
 8002fec:	e089      	b.n	8003102 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff6:	4b79      	ldr	r3, [pc, #484]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	4013      	ands	r3, r2
 8003000:	d120      	bne.n	8003044 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0e1      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800300e:	4b73      	ldr	r3, [pc, #460]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	049b      	lsls	r3, r3, #18
 8003016:	4013      	ands	r3, r2
 8003018:	d114      	bne.n	8003044 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0d5      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d106      	bne.n	8003034 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003026:	4b6d      	ldr	r3, [pc, #436]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2204      	movs	r2, #4
 800302c:	4013      	ands	r3, r2
 800302e:	d109      	bne.n	8003044 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0ca      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003034:	4b69      	ldr	r3, [pc, #420]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0c2      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003044:	4b65      	ldr	r3, [pc, #404]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2203      	movs	r2, #3
 800304a:	4393      	bics	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4b62      	ldr	r3, [pc, #392]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003054:	430a      	orrs	r2, r1
 8003056:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fe f962 	bl	8001320 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d111      	bne.n	800308c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003068:	e009      	b.n	800307e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306a:	f7fe f959 	bl	8001320 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	4a58      	ldr	r2, [pc, #352]	@ (80031d8 <HAL_RCC_ClockConfig+0x274>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0a5      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800307e:	4b57      	ldr	r3, [pc, #348]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	220c      	movs	r2, #12
 8003084:	4013      	ands	r3, r2
 8003086:	2b08      	cmp	r3, #8
 8003088:	d1ef      	bne.n	800306a <HAL_RCC_ClockConfig+0x106>
 800308a:	e03a      	b.n	8003102 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d111      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003094:	e009      	b.n	80030aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003096:	f7fe f943 	bl	8001320 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	4a4d      	ldr	r2, [pc, #308]	@ (80031d8 <HAL_RCC_ClockConfig+0x274>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e08f      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030aa:	4b4c      	ldr	r3, [pc, #304]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	220c      	movs	r2, #12
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d1ef      	bne.n	8003096 <HAL_RCC_ClockConfig+0x132>
 80030b6:	e024      	b.n	8003102 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d11b      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030c0:	e009      	b.n	80030d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c2:	f7fe f92d 	bl	8001320 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	4a42      	ldr	r2, [pc, #264]	@ (80031d8 <HAL_RCC_ClockConfig+0x274>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e079      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d6:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	220c      	movs	r2, #12
 80030dc:	4013      	ands	r3, r2
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d1ef      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x15e>
 80030e2:	e00e      	b.n	8003102 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fe f91c 	bl	8001320 <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	4a3a      	ldr	r2, [pc, #232]	@ (80031d8 <HAL_RCC_ClockConfig+0x274>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e068      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030f8:	4b38      	ldr	r3, [pc, #224]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	220c      	movs	r2, #12
 80030fe:	4013      	ands	r3, r2
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003102:	4b34      	ldr	r3, [pc, #208]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2201      	movs	r2, #1
 8003108:	4013      	ands	r3, r2
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d21e      	bcs.n	800314e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003110:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2201      	movs	r2, #1
 8003116:	4393      	bics	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	4b2e      	ldr	r3, [pc, #184]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003122:	f7fe f8fd 	bl	8001320 <HAL_GetTick>
 8003126:	0003      	movs	r3, r0
 8003128:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	e009      	b.n	8003140 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe f8f8 	bl	8001320 <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	4a28      	ldr	r2, [pc, #160]	@ (80031d8 <HAL_RCC_ClockConfig+0x274>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e044      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003140:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d1ee      	bne.n	800312c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2204      	movs	r2, #4
 8003154:	4013      	ands	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003158:	4b20      	ldr	r3, [pc, #128]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a20      	ldr	r2, [pc, #128]	@ (80031e0 <HAL_RCC_ClockConfig+0x27c>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003168:	430a      	orrs	r2, r1
 800316a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2208      	movs	r2, #8
 8003172:	4013      	ands	r3, r2
 8003174:	d00a      	beq.n	800318c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003176:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	4a1a      	ldr	r2, [pc, #104]	@ (80031e4 <HAL_RCC_ClockConfig+0x280>)
 800317c:	4013      	ands	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	00da      	lsls	r2, r3, #3
 8003186:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003188:	430a      	orrs	r2, r1
 800318a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318c:	f000 f832 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8003190:	0001      	movs	r1, r0
 8003192:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <HAL_RCC_ClockConfig+0x278>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	220f      	movs	r2, #15
 800319a:	4013      	ands	r3, r2
 800319c:	4a12      	ldr	r2, [pc, #72]	@ (80031e8 <HAL_RCC_ClockConfig+0x284>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	000a      	movs	r2, r1
 80031a2:	40da      	lsrs	r2, r3
 80031a4:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <HAL_RCC_ClockConfig+0x288>)
 80031a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031a8:	4b11      	ldr	r3, [pc, #68]	@ (80031f0 <HAL_RCC_ClockConfig+0x28c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	250b      	movs	r5, #11
 80031ae:	197c      	adds	r4, r7, r5
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fe f86f 	bl	8001294 <HAL_InitTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80031ba:	197b      	adds	r3, r7, r5
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80031c2:	197b      	adds	r3, r7, r5
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	e000      	b.n	80031ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bdb0      	pop	{r4, r5, r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	40022000 	.word	0x40022000
 80031d8:	00001388 	.word	0x00001388
 80031dc:	40021000 	.word	0x40021000
 80031e0:	fffff8ff 	.word	0xfffff8ff
 80031e4:	ffffc7ff 	.word	0xffffc7ff
 80031e8:	080049e8 	.word	0x080049e8
 80031ec:	20000014 	.word	0x20000014
 80031f0:	20000018 	.word	0x20000018

080031f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	b08e      	sub	sp, #56	@ 0x38
 80031f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80031fa:	4b4c      	ldr	r3, [pc, #304]	@ (800332c <HAL_RCC_GetSysClockFreq+0x138>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003202:	230c      	movs	r3, #12
 8003204:	4013      	ands	r3, r2
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d014      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x40>
 800320a:	d900      	bls.n	800320e <HAL_RCC_GetSysClockFreq+0x1a>
 800320c:	e07b      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x112>
 800320e:	2b04      	cmp	r3, #4
 8003210:	d002      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x24>
 8003212:	2b08      	cmp	r3, #8
 8003214:	d00b      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0x3a>
 8003216:	e076      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003218:	4b44      	ldr	r3, [pc, #272]	@ (800332c <HAL_RCC_GetSysClockFreq+0x138>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2210      	movs	r2, #16
 800321e:	4013      	ands	r3, r2
 8003220:	d002      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003222:	4b43      	ldr	r3, [pc, #268]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003226:	e07c      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003228:	4b42      	ldr	r3, [pc, #264]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x140>)
 800322a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800322c:	e079      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800322e:	4b42      	ldr	r3, [pc, #264]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x144>)
 8003230:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003232:	e076      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	0c9a      	lsrs	r2, r3, #18
 8003238:	230f      	movs	r3, #15
 800323a:	401a      	ands	r2, r3
 800323c:	4b3f      	ldr	r3, [pc, #252]	@ (800333c <HAL_RCC_GetSysClockFreq+0x148>)
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003244:	0d9a      	lsrs	r2, r3, #22
 8003246:	2303      	movs	r3, #3
 8003248:	4013      	ands	r3, r2
 800324a:	3301      	adds	r3, #1
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800324e:	4b37      	ldr	r3, [pc, #220]	@ (800332c <HAL_RCC_GetSysClockFreq+0x138>)
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	025b      	lsls	r3, r3, #9
 8003256:	4013      	ands	r3, r2
 8003258:	d01a      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	4a35      	ldr	r2, [pc, #212]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x144>)
 8003264:	2300      	movs	r3, #0
 8003266:	69b8      	ldr	r0, [r7, #24]
 8003268:	69f9      	ldr	r1, [r7, #28]
 800326a:	f7fd f803 	bl	8000274 <__aeabi_lmul>
 800326e:	0002      	movs	r2, r0
 8003270:	000b      	movs	r3, r1
 8003272:	0010      	movs	r0, r2
 8003274:	0019      	movs	r1, r3
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f7fc ffd7 	bl	8000234 <__aeabi_uldivmod>
 8003286:	0002      	movs	r2, r0
 8003288:	000b      	movs	r3, r1
 800328a:	0013      	movs	r3, r2
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
 800328e:	e037      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003290:	4b26      	ldr	r3, [pc, #152]	@ (800332c <HAL_RCC_GetSysClockFreq+0x138>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2210      	movs	r2, #16
 8003296:	4013      	ands	r3, r2
 8003298:	d01a      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4a23      	ldr	r2, [pc, #140]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x13c>)
 80032a4:	2300      	movs	r3, #0
 80032a6:	68b8      	ldr	r0, [r7, #8]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	f7fc ffe3 	bl	8000274 <__aeabi_lmul>
 80032ae:	0002      	movs	r2, r0
 80032b0:	000b      	movs	r3, r1
 80032b2:	0010      	movs	r0, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f7fc ffb7 	bl	8000234 <__aeabi_uldivmod>
 80032c6:	0002      	movs	r2, r0
 80032c8:	000b      	movs	r3, r1
 80032ca:	0013      	movs	r3, r2
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ce:	e017      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d2:	0018      	movs	r0, r3
 80032d4:	2300      	movs	r3, #0
 80032d6:	0019      	movs	r1, r3
 80032d8:	4a16      	ldr	r2, [pc, #88]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x140>)
 80032da:	2300      	movs	r3, #0
 80032dc:	f7fc ffca 	bl	8000274 <__aeabi_lmul>
 80032e0:	0002      	movs	r2, r0
 80032e2:	000b      	movs	r3, r1
 80032e4:	0010      	movs	r0, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	001c      	movs	r4, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	001d      	movs	r5, r3
 80032f0:	0022      	movs	r2, r4
 80032f2:	002b      	movs	r3, r5
 80032f4:	f7fc ff9e 	bl	8000234 <__aeabi_uldivmod>
 80032f8:	0002      	movs	r2, r0
 80032fa:	000b      	movs	r3, r1
 80032fc:	0013      	movs	r3, r2
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003302:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003304:	e00d      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003306:	4b09      	ldr	r3, [pc, #36]	@ (800332c <HAL_RCC_GetSysClockFreq+0x138>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	0b5b      	lsrs	r3, r3, #13
 800330c:	2207      	movs	r2, #7
 800330e:	4013      	ands	r3, r2
 8003310:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	3301      	adds	r3, #1
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	0212      	lsls	r2, r2, #8
 800331a:	409a      	lsls	r2, r3
 800331c:	0013      	movs	r3, r2
 800331e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003320:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b00e      	add	sp, #56	@ 0x38
 800332a:	bdb0      	pop	{r4, r5, r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	003d0900 	.word	0x003d0900
 8003334:	00f42400 	.word	0x00f42400
 8003338:	007a1200 	.word	0x007a1200
 800333c:	080049f8 	.word	0x080049f8

08003340 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003348:	2017      	movs	r0, #23
 800334a:	183b      	adds	r3, r7, r0
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	d100      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800335a:	e0c2      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335c:	4b90      	ldr	r3, [pc, #576]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003360:	2380      	movs	r3, #128	@ 0x80
 8003362:	055b      	lsls	r3, r3, #21
 8003364:	4013      	ands	r3, r2
 8003366:	d109      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b8d      	ldr	r3, [pc, #564]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800336c:	4b8c      	ldr	r3, [pc, #560]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	0549      	lsls	r1, r1, #21
 8003372:	430a      	orrs	r2, r1
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003376:	183b      	adds	r3, r7, r0
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b89      	ldr	r3, [pc, #548]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4013      	ands	r3, r2
 8003386:	d11a      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003388:	4b86      	ldr	r3, [pc, #536]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b85      	ldr	r3, [pc, #532]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338e:	2180      	movs	r1, #128	@ 0x80
 8003390:	0049      	lsls	r1, r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fd ffc3 	bl	8001320 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	e008      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fd ffbe 	bl	8001320 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	@ 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0f2      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b7c      	ldr	r3, [pc, #496]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033be:	4b78      	ldr	r3, [pc, #480]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	23c0      	movs	r3, #192	@ 0xc0
 80033c4:	039b      	lsls	r3, r3, #14
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	23c0      	movs	r3, #192	@ 0xc0
 80033d0:	039b      	lsls	r3, r3, #14
 80033d2:	4013      	ands	r3, r2
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d013      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	23c0      	movs	r3, #192	@ 0xc0
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	401a      	ands	r2, r3
 80033e4:	23c0      	movs	r3, #192	@ 0xc0
 80033e6:	029b      	lsls	r3, r3, #10
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80033ec:	4b6c      	ldr	r3, [pc, #432]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	@ 0x80
 80033f2:	029b      	lsls	r3, r3, #10
 80033f4:	401a      	ands	r2, r3
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d101      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0ca      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003402:	4b67      	ldr	r3, [pc, #412]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003406:	23c0      	movs	r3, #192	@ 0xc0
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	23c0      	movs	r3, #192	@ 0xc0
 800341a:	029b      	lsls	r3, r3, #10
 800341c:	4013      	ands	r3, r2
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	429a      	cmp	r2, r3
 8003422:	d033      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2220      	movs	r2, #32
 800342a:	4013      	ands	r3, r2
 800342c:	d02e      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800342e:	4b5c      	ldr	r3, [pc, #368]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003432:	4a5d      	ldr	r2, [pc, #372]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003438:	4b59      	ldr	r3, [pc, #356]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800343c:	4b58      	ldr	r3, [pc, #352]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	2180      	movs	r1, #128	@ 0x80
 8003440:	0309      	lsls	r1, r1, #12
 8003442:	430a      	orrs	r2, r1
 8003444:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003446:	4b56      	ldr	r3, [pc, #344]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800344a:	4b55      	ldr	r3, [pc, #340]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	4957      	ldr	r1, [pc, #348]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800344e:	400a      	ands	r2, r1
 8003450:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003452:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4013      	ands	r3, r2
 8003460:	d014      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fd ff5d 	bl	8001320 <HAL_GetTick>
 8003466:	0003      	movs	r3, r0
 8003468:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800346a:	e009      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd ff58 	bl	8001320 <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	4a4e      	ldr	r2, [pc, #312]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e08b      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003480:	4b47      	ldr	r3, [pc, #284]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003484:	2380      	movs	r3, #128	@ 0x80
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4013      	ands	r3, r2
 800348a:	d0ef      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	23c0      	movs	r3, #192	@ 0xc0
 8003492:	029b      	lsls	r3, r3, #10
 8003494:	401a      	ands	r2, r3
 8003496:	23c0      	movs	r3, #192	@ 0xc0
 8003498:	029b      	lsls	r3, r3, #10
 800349a:	429a      	cmp	r2, r3
 800349c:	d10c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800349e:	4b40      	ldr	r3, [pc, #256]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a44      	ldr	r2, [pc, #272]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	23c0      	movs	r3, #192	@ 0xc0
 80034ae:	039b      	lsls	r3, r3, #14
 80034b0:	401a      	ands	r2, r3
 80034b2:	4b3b      	ldr	r3, [pc, #236]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	4b39      	ldr	r3, [pc, #228]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	23c0      	movs	r3, #192	@ 0xc0
 80034c2:	029b      	lsls	r3, r3, #10
 80034c4:	401a      	ands	r2, r3
 80034c6:	4b36      	ldr	r3, [pc, #216]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	430a      	orrs	r2, r1
 80034ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034cc:	2317      	movs	r3, #23
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d105      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d6:	4b32      	ldr	r3, [pc, #200]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034da:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034dc:	4936      	ldr	r1, [pc, #216]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80034de:	400a      	ands	r2, r1
 80034e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2201      	movs	r2, #1
 80034e8:	4013      	ands	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ec:	4b2c      	ldr	r3, [pc, #176]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f0:	2203      	movs	r2, #3
 80034f2:	4393      	bics	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	4b29      	ldr	r3, [pc, #164]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fc:	430a      	orrs	r2, r1
 80034fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800350a:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	220c      	movs	r2, #12
 8003510:	4393      	bics	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4b21      	ldr	r3, [pc, #132]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	430a      	orrs	r2, r1
 800351c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003528:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352c:	4a23      	ldr	r2, [pc, #140]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003538:	430a      	orrs	r2, r1
 800353a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2208      	movs	r2, #8
 8003542:	4013      	ands	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003546:	4b16      	ldr	r3, [pc, #88]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	4b12      	ldr	r3, [pc, #72]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	430a      	orrs	r2, r1
 8003558:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2240      	movs	r2, #64	@ 0x40
 8003560:	4013      	ands	r3, r2
 8003562:	d009      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003564:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003568:	4a16      	ldr	r2, [pc, #88]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800356a:	4013      	ands	r3, r2
 800356c:	0019      	movs	r1, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003574:	430a      	orrs	r2, r1
 8003576:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	4013      	ands	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003582:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	4a10      	ldr	r2, [pc, #64]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003588:	4013      	ands	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	4b03      	ldr	r3, [pc, #12]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003592:	430a      	orrs	r2, r1
 8003594:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b006      	add	sp, #24
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40007000 	.word	0x40007000
 80035a8:	fffcffff 	.word	0xfffcffff
 80035ac:	fff7ffff 	.word	0xfff7ffff
 80035b0:	00001388 	.word	0x00001388
 80035b4:	ffcfffff 	.word	0xffcfffff
 80035b8:	efffffff 	.word	0xefffffff
 80035bc:	fffff3ff 	.word	0xfffff3ff
 80035c0:	ffffcfff 	.word	0xffffcfff
 80035c4:	fbffffff 	.word	0xfbffffff
 80035c8:	fff3ffff 	.word	0xfff3ffff

080035cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e032      	b.n	8003644 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2239      	movs	r2, #57	@ 0x39
 80035e2:	5c9b      	ldrb	r3, [r3, r2]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2238      	movs	r2, #56	@ 0x38
 80035ee:	2100      	movs	r1, #0
 80035f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7fd fcdf 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2239      	movs	r2, #57	@ 0x39
 80035fe:	2102      	movs	r1, #2
 8003600:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	0019      	movs	r1, r3
 800360c:	0010      	movs	r0, r2
 800360e:	f000 fa9f 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	223e      	movs	r2, #62	@ 0x3e
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	223a      	movs	r2, #58	@ 0x3a
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	223b      	movs	r2, #59	@ 0x3b
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	223c      	movs	r2, #60	@ 0x3c
 800362e:	2101      	movs	r1, #1
 8003630:	5499      	strb	r1, [r3, r2]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	223d      	movs	r2, #61	@ 0x3d
 8003636:	2101      	movs	r1, #1
 8003638:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2239      	movs	r2, #57	@ 0x39
 800363e:	2101      	movs	r1, #1
 8003640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e032      	b.n	80036c4 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2239      	movs	r2, #57	@ 0x39
 8003662:	5c9b      	ldrb	r3, [r3, r2]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2238      	movs	r2, #56	@ 0x38
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 f829 	bl	80036cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2239      	movs	r2, #57	@ 0x39
 800367e:	2102      	movs	r1, #2
 8003680:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	0019      	movs	r1, r3
 800368c:	0010      	movs	r0, r2
 800368e:	f000 fa5f 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	223e      	movs	r2, #62	@ 0x3e
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	223a      	movs	r2, #58	@ 0x3a
 800369e:	2101      	movs	r1, #1
 80036a0:	5499      	strb	r1, [r3, r2]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	223b      	movs	r2, #59	@ 0x3b
 80036a6:	2101      	movs	r1, #1
 80036a8:	5499      	strb	r1, [r3, r2]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	223c      	movs	r2, #60	@ 0x3c
 80036ae:	2101      	movs	r1, #1
 80036b0:	5499      	strb	r1, [r3, r2]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223d      	movs	r2, #61	@ 0x3d
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2239      	movs	r2, #57	@ 0x39
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e032      	b.n	8003754 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2239      	movs	r2, #57	@ 0x39
 80036f2:	5c9b      	ldrb	r3, [r3, r2]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2238      	movs	r2, #56	@ 0x38
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	0018      	movs	r0, r3
 8003706:	f000 f829 	bl	800375c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2239      	movs	r2, #57	@ 0x39
 800370e:	2102      	movs	r1, #2
 8003710:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	0019      	movs	r1, r3
 800371c:	0010      	movs	r0, r2
 800371e:	f000 fa17 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223e      	movs	r2, #62	@ 0x3e
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	223a      	movs	r2, #58	@ 0x3a
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	223b      	movs	r2, #59	@ 0x3b
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	223c      	movs	r2, #60	@ 0x3c
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	223d      	movs	r2, #61	@ 0x3d
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2239      	movs	r2, #57	@ 0x39
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2317      	movs	r3, #23
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2238      	movs	r2, #56	@ 0x38
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_TIM_OC_ConfigChannel+0x22>
 800378a:	2302      	movs	r3, #2
 800378c:	e042      	b.n	8003814 <HAL_TIM_OC_ConfigChannel+0xa8>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2238      	movs	r2, #56	@ 0x38
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b0c      	cmp	r3, #12
 800379a:	d027      	beq.n	80037ec <HAL_TIM_OC_ConfigChannel+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d82c      	bhi.n	80037fc <HAL_TIM_OC_ConfigChannel+0x90>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d019      	beq.n	80037dc <HAL_TIM_OC_ConfigChannel+0x70>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d826      	bhi.n	80037fc <HAL_TIM_OC_ConfigChannel+0x90>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_TIM_OC_ConfigChannel+0x50>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d008      	beq.n	80037cc <HAL_TIM_OC_ConfigChannel+0x60>
 80037ba:	e01f      	b.n	80037fc <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	0011      	movs	r1, r2
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 fa17 	bl	8003bf8 <TIM_OC1_SetConfig>
      break;
 80037ca:	e01c      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 fa4b 	bl	8003c70 <TIM_OC2_SetConfig>
      break;
 80037da:	e014      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 fa85 	bl	8003cf4 <TIM_OC3_SetConfig>
      break;
 80037ea:	e00c      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	0011      	movs	r1, r2
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 fabd 	bl	8003d74 <TIM_OC4_SetConfig>
      break;
 80037fa:	e004      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80037fc:	2317      	movs	r3, #23
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
      break;
 8003804:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2238      	movs	r2, #56	@ 0x38
 800380a:	2100      	movs	r1, #0
 800380c:	5499      	strb	r1, [r3, r2]

  return status;
 800380e:	2317      	movs	r3, #23
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	781b      	ldrb	r3, [r3, #0]
}
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	b006      	add	sp, #24
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2317      	movs	r3, #23
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2238      	movs	r2, #56	@ 0x38
 8003834:	5c9b      	ldrb	r3, [r3, r2]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_TIM_PWM_ConfigChannel+0x22>
 800383a:	2302      	movs	r3, #2
 800383c:	e0ad      	b.n	800399a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2238      	movs	r2, #56	@ 0x38
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d100      	bne.n	800384e <HAL_TIM_PWM_ConfigChannel+0x32>
 800384c:	e076      	b.n	800393c <HAL_TIM_PWM_ConfigChannel+0x120>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d900      	bls.n	8003856 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003854:	e095      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d04e      	beq.n	80038fa <HAL_TIM_PWM_ConfigChannel+0xde>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d900      	bls.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003862:	e08e      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x56>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d021      	beq.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003870:	e087      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	0011      	movs	r1, r2
 800387a:	0018      	movs	r0, r3
 800387c:	f000 f9bc 	bl	8003bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2108      	movs	r1, #8
 800388c:	430a      	orrs	r2, r1
 800388e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2104      	movs	r1, #4
 800389c:	438a      	bics	r2, r1
 800389e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6999      	ldr	r1, [r3, #24]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	619a      	str	r2, [r3, #24]
      break;
 80038b2:	e06b      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	0011      	movs	r1, r2
 80038bc:	0018      	movs	r0, r3
 80038be:	f000 f9d7 	bl	8003c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2180      	movs	r1, #128	@ 0x80
 80038ce:	0109      	lsls	r1, r1, #4
 80038d0:	430a      	orrs	r2, r1
 80038d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4931      	ldr	r1, [pc, #196]	@ (80039a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6999      	ldr	r1, [r3, #24]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	619a      	str	r2, [r3, #24]
      break;
 80038f8:	e048      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	0011      	movs	r1, r2
 8003902:	0018      	movs	r0, r3
 8003904:	f000 f9f6 	bl	8003cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2108      	movs	r1, #8
 8003914:	430a      	orrs	r2, r1
 8003916:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2104      	movs	r1, #4
 8003924:	438a      	bics	r2, r1
 8003926:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69d9      	ldr	r1, [r3, #28]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	61da      	str	r2, [r3, #28]
      break;
 800393a:	e027      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	0011      	movs	r1, r2
 8003944:	0018      	movs	r0, r3
 8003946:	f000 fa15 	bl	8003d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2180      	movs	r1, #128	@ 0x80
 8003956:	0109      	lsls	r1, r1, #4
 8003958:	430a      	orrs	r2, r1
 800395a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	490f      	ldr	r1, [pc, #60]	@ (80039a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003968:	400a      	ands	r2, r1
 800396a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69d9      	ldr	r1, [r3, #28]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	021a      	lsls	r2, r3, #8
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	61da      	str	r2, [r3, #28]
      break;
 8003980:	e004      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003982:	2317      	movs	r3, #23
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
      break;
 800398a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2238      	movs	r2, #56	@ 0x38
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]

  return status;
 8003994:	2317      	movs	r3, #23
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	781b      	ldrb	r3, [r3, #0]
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b006      	add	sp, #24
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	fffffbff 	.word	0xfffffbff

080039a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	230f      	movs	r3, #15
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2238      	movs	r2, #56	@ 0x38
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_ConfigClockSource+0x20>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0bc      	b.n	8003b42 <HAL_TIM_ConfigClockSource+0x19a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2238      	movs	r2, #56	@ 0x38
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2239      	movs	r2, #57	@ 0x39
 80039d4:	2102      	movs	r1, #2
 80039d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2277      	movs	r2, #119	@ 0x77
 80039e4:	4393      	bics	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a58      	ldr	r2, [pc, #352]	@ (8003b4c <HAL_TIM_ConfigClockSource+0x1a4>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2280      	movs	r2, #128	@ 0x80
 80039fe:	0192      	lsls	r2, r2, #6
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d040      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0xde>
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	0192      	lsls	r2, r2, #6
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d900      	bls.n	8003a0e <HAL_TIM_ConfigClockSource+0x66>
 8003a0c:	e088      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a0e:	2280      	movs	r2, #128	@ 0x80
 8003a10:	0152      	lsls	r2, r2, #5
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d100      	bne.n	8003a18 <HAL_TIM_ConfigClockSource+0x70>
 8003a16:	e088      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x182>
 8003a18:	2280      	movs	r2, #128	@ 0x80
 8003a1a:	0152      	lsls	r2, r2, #5
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d900      	bls.n	8003a22 <HAL_TIM_ConfigClockSource+0x7a>
 8003a20:	e07e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a22:	2b70      	cmp	r3, #112	@ 0x70
 8003a24:	d018      	beq.n	8003a58 <HAL_TIM_ConfigClockSource+0xb0>
 8003a26:	d900      	bls.n	8003a2a <HAL_TIM_ConfigClockSource+0x82>
 8003a28:	e07a      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a2a:	2b60      	cmp	r3, #96	@ 0x60
 8003a2c:	d04f      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x126>
 8003a2e:	d900      	bls.n	8003a32 <HAL_TIM_ConfigClockSource+0x8a>
 8003a30:	e076      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a32:	2b50      	cmp	r3, #80	@ 0x50
 8003a34:	d03b      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x106>
 8003a36:	d900      	bls.n	8003a3a <HAL_TIM_ConfigClockSource+0x92>
 8003a38:	e072      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d057      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x146>
 8003a3e:	d900      	bls.n	8003a42 <HAL_TIM_ConfigClockSource+0x9a>
 8003a40:	e06e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a42:	2b30      	cmp	r3, #48	@ 0x30
 8003a44:	d063      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a46:	d86b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d060      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a4c:	d868      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d05d      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d05b      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a56:	e063      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6899      	ldr	r1, [r3, #8]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f000 fa44 	bl	8003ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2277      	movs	r2, #119	@ 0x77
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	609a      	str	r2, [r3, #8]
      break;
 8003a84:	e052      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f000 fa2d 	bl	8003ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	@ 0x80
 8003aa6:	01c9      	lsls	r1, r1, #7
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
      break;
 8003aac:	e03e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	001a      	movs	r2, r3
 8003abc:	f000 f9a0 	bl	8003e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2150      	movs	r1, #80	@ 0x50
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 f9fa 	bl	8003ec0 <TIM_ITRx_SetConfig>
      break;
 8003acc:	e02e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	001a      	movs	r2, r3
 8003adc:	f000 f9be 	bl	8003e5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2160      	movs	r1, #96	@ 0x60
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f9ea 	bl	8003ec0 <TIM_ITRx_SetConfig>
      break;
 8003aec:	e01e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	001a      	movs	r2, r3
 8003afc:	f000 f980 	bl	8003e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f9da 	bl	8003ec0 <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e00e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0019      	movs	r1, r3
 8003b18:	0010      	movs	r0, r2
 8003b1a:	f000 f9d1 	bl	8003ec0 <TIM_ITRx_SetConfig>
      break;
 8003b1e:	e005      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b20:	230f      	movs	r3, #15
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
      break;
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b2a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2239      	movs	r2, #57	@ 0x39
 8003b30:	2101      	movs	r1, #1
 8003b32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2238      	movs	r2, #56	@ 0x38
 8003b38:	2100      	movs	r1, #0
 8003b3a:	5499      	strb	r1, [r3, r2]

  return status;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	781b      	ldrb	r3, [r3, #0]
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	ffff00ff 	.word	0xffff00ff

08003b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	05db      	lsls	r3, r3, #23
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d007      	beq.n	8003b7a <TIM_Base_SetConfig+0x2a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bec <TIM_Base_SetConfig+0x9c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_Base_SetConfig+0x2a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf0 <TIM_Base_SetConfig+0xa0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2270      	movs	r2, #112	@ 0x70
 8003b7e:	4393      	bics	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	05db      	lsls	r3, r3, #23
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0x56>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <TIM_Base_SetConfig+0x9c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0x56>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a13      	ldr	r2, [pc, #76]	@ (8003bf0 <TIM_Base_SetConfig+0xa0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <TIM_Base_SetConfig+0xa4>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2280      	movs	r2, #128	@ 0x80
 8003bbc:	4393      	bics	r3, r2
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	615a      	str	r2, [r3, #20]
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40010800 	.word	0x40010800
 8003bf0:	40011400 	.word	0x40011400
 8003bf4:	fffffcff 	.word	0xfffffcff

08003bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	2201      	movs	r2, #1
 8003c08:	4393      	bics	r3, r2
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2270      	movs	r2, #112	@ 0x70
 8003c26:	4393      	bics	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	4393      	bics	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4393      	bics	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	621a      	str	r2, [r3, #32]
}
 8003c68:	46c0      	nop			@ (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b006      	add	sp, #24
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	4393      	bics	r3, r2
 8003c82:	001a      	movs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <TIM_OC2_SetConfig+0x7c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a12      	ldr	r2, [pc, #72]	@ (8003cf0 <TIM_OC2_SetConfig+0x80>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	4393      	bics	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	621a      	str	r2, [r3, #32]
}
 8003ce4:	46c0      	nop			@ (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b006      	add	sp, #24
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	ffff8fff 	.word	0xffff8fff
 8003cf0:	fffffcff 	.word	0xfffffcff

08003cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <TIM_OC3_SetConfig+0x78>)
 8003d04:	401a      	ands	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2270      	movs	r2, #112	@ 0x70
 8003d20:	4393      	bics	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2203      	movs	r2, #3
 8003d28:	4393      	bics	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	@ (8003d70 <TIM_OC3_SetConfig+0x7c>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b006      	add	sp, #24
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	fffffeff 	.word	0xfffffeff
 8003d70:	fffffdff 	.word	0xfffffdff

08003d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <TIM_OC4_SetConfig+0x7c>)
 8003d84:	401a      	ands	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a15      	ldr	r2, [pc, #84]	@ (8003df4 <TIM_OC4_SetConfig+0x80>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a14      	ldr	r2, [pc, #80]	@ (8003df8 <TIM_OC4_SetConfig+0x84>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4a10      	ldr	r2, [pc, #64]	@ (8003dfc <TIM_OC4_SetConfig+0x88>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b006      	add	sp, #24
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	ffffefff 	.word	0xffffefff
 8003df4:	ffff8fff 	.word	0xffff8fff
 8003df8:	fffffcff 	.word	0xfffffcff
 8003dfc:	ffffdfff 	.word	0xffffdfff

08003e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	2201      	movs	r2, #1
 8003e18:	4393      	bics	r3, r2
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	22f0      	movs	r2, #240	@ 0xf0
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	46c0      	nop			@ (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b006      	add	sp, #24
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	4393      	bics	r3, r2
 8003e70:	001a      	movs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4a0d      	ldr	r2, [pc, #52]	@ (8003ebc <TIM_TI2_ConfigInputStage+0x60>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	031b      	lsls	r3, r3, #12
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	22a0      	movs	r2, #160	@ 0xa0
 8003e98:	4393      	bics	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b006      	add	sp, #24
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	ffff0fff 	.word	0xffff0fff

08003ec0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2270      	movs	r2, #112	@ 0x70
 8003ed4:	4393      	bics	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	2207      	movs	r2, #7
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	609a      	str	r2, [r3, #8]
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b004      	add	sp, #16
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4a09      	ldr	r2, [pc, #36]	@ (8003f30 <TIM_ETR_SetConfig+0x3c>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	021a      	lsls	r2, r3, #8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	46c0      	nop			@ (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b006      	add	sp, #24
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	ffff00ff 	.word	0xffff00ff

08003f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2238      	movs	r2, #56	@ 0x38
 8003f42:	5c9b      	ldrb	r3, [r3, r2]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e042      	b.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2238      	movs	r2, #56	@ 0x38
 8003f50:	2101      	movs	r1, #1
 8003f52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2239      	movs	r2, #57	@ 0x39
 8003f58:	2102      	movs	r1, #2
 8003f5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2270      	movs	r2, #112	@ 0x70
 8003f70:	4393      	bics	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	05db      	lsls	r3, r3, #23
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d009      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a11      	ldr	r2, [pc, #68]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2280      	movs	r2, #128	@ 0x80
 8003faa:	4393      	bics	r3, r2
 8003fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2239      	movs	r2, #57	@ 0x39
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2238      	movs	r2, #56	@ 0x38
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b004      	add	sp, #16
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	40010800 	.word	0x40010800
 8003fe0:	40011400 	.word	0x40011400

08003fe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <USB_DisableGlobalInt+0x30>)
 8003fee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2240      	movs	r2, #64	@ 0x40
 8003ff4:	5a9b      	ldrh	r3, [r3, r2]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	43d2      	mvns	r2, r2
 8003ffe:	b292      	uxth	r2, r2
 8004000:	4013      	ands	r3, r2
 8004002:	b299      	uxth	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2240      	movs	r2, #64	@ 0x40
 8004008:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b004      	add	sp, #16
 8004012:	bd80      	pop	{r7, pc}
 8004014:	0000bf80 	.word	0x0000bf80

08004018 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004018:	b084      	sub	sp, #16
 800401a:	b590      	push	{r4, r7, lr}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	2004      	movs	r0, #4
 8004024:	2410      	movs	r4, #16
 8004026:	1900      	adds	r0, r0, r4
 8004028:	2408      	movs	r4, #8
 800402a:	46a4      	mov	ip, r4
 800402c:	44bc      	add	ip, r7
 800402e:	4460      	add	r0, ip
 8004030:	6001      	str	r1, [r0, #0]
 8004032:	6042      	str	r2, [r0, #4]
 8004034:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2240      	movs	r2, #64	@ 0x40
 800403a:	2101      	movs	r1, #1
 800403c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2240      	movs	r2, #64	@ 0x40
 8004042:	2100      	movs	r1, #0
 8004044:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2244      	movs	r2, #68	@ 0x44
 800404a:	2100      	movs	r1, #0
 800404c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2250      	movs	r2, #80	@ 0x50
 8004052:	2100      	movs	r1, #0
 8004054:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	b003      	add	sp, #12
 800405e:	bc90      	pop	{r4, r7}
 8004060:	bc08      	pop	{r3}
 8004062:	b004      	add	sp, #16
 8004064:	4718      	bx	r3
	...

08004068 <siprintf>:
 8004068:	b40e      	push	{r1, r2, r3}
 800406a:	b500      	push	{lr}
 800406c:	490b      	ldr	r1, [pc, #44]	@ (800409c <siprintf+0x34>)
 800406e:	b09c      	sub	sp, #112	@ 0x70
 8004070:	ab1d      	add	r3, sp, #116	@ 0x74
 8004072:	9002      	str	r0, [sp, #8]
 8004074:	9006      	str	r0, [sp, #24]
 8004076:	9107      	str	r1, [sp, #28]
 8004078:	9104      	str	r1, [sp, #16]
 800407a:	4809      	ldr	r0, [pc, #36]	@ (80040a0 <siprintf+0x38>)
 800407c:	4909      	ldr	r1, [pc, #36]	@ (80040a4 <siprintf+0x3c>)
 800407e:	cb04      	ldmia	r3!, {r2}
 8004080:	9105      	str	r1, [sp, #20]
 8004082:	6800      	ldr	r0, [r0, #0]
 8004084:	a902      	add	r1, sp, #8
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	f000 f99e 	bl	80043c8 <_svfiprintf_r>
 800408c:	2200      	movs	r2, #0
 800408e:	9b02      	ldr	r3, [sp, #8]
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	b01c      	add	sp, #112	@ 0x70
 8004094:	bc08      	pop	{r3}
 8004096:	b003      	add	sp, #12
 8004098:	4718      	bx	r3
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	7fffffff 	.word	0x7fffffff
 80040a0:	20000020 	.word	0x20000020
 80040a4:	ffff0208 	.word	0xffff0208

080040a8 <memset>:
 80040a8:	0003      	movs	r3, r0
 80040aa:	1882      	adds	r2, r0, r2
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d100      	bne.n	80040b2 <memset+0xa>
 80040b0:	4770      	bx	lr
 80040b2:	7019      	strb	r1, [r3, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	e7f9      	b.n	80040ac <memset+0x4>

080040b8 <__errno>:
 80040b8:	4b01      	ldr	r3, [pc, #4]	@ (80040c0 <__errno+0x8>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	4770      	bx	lr
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	20000020 	.word	0x20000020

080040c4 <__libc_init_array>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	2600      	movs	r6, #0
 80040c8:	4c0c      	ldr	r4, [pc, #48]	@ (80040fc <__libc_init_array+0x38>)
 80040ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004100 <__libc_init_array+0x3c>)
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	42a6      	cmp	r6, r4
 80040d2:	d109      	bne.n	80040e8 <__libc_init_array+0x24>
 80040d4:	2600      	movs	r6, #0
 80040d6:	f000 fc65 	bl	80049a4 <_init>
 80040da:	4c0a      	ldr	r4, [pc, #40]	@ (8004104 <__libc_init_array+0x40>)
 80040dc:	4d0a      	ldr	r5, [pc, #40]	@ (8004108 <__libc_init_array+0x44>)
 80040de:	1b64      	subs	r4, r4, r5
 80040e0:	10a4      	asrs	r4, r4, #2
 80040e2:	42a6      	cmp	r6, r4
 80040e4:	d105      	bne.n	80040f2 <__libc_init_array+0x2e>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	00b3      	lsls	r3, r6, #2
 80040ea:	58eb      	ldr	r3, [r5, r3]
 80040ec:	4798      	blx	r3
 80040ee:	3601      	adds	r6, #1
 80040f0:	e7ee      	b.n	80040d0 <__libc_init_array+0xc>
 80040f2:	00b3      	lsls	r3, r6, #2
 80040f4:	58eb      	ldr	r3, [r5, r3]
 80040f6:	4798      	blx	r3
 80040f8:	3601      	adds	r6, #1
 80040fa:	e7f2      	b.n	80040e2 <__libc_init_array+0x1e>
 80040fc:	08004a3c 	.word	0x08004a3c
 8004100:	08004a3c 	.word	0x08004a3c
 8004104:	08004a40 	.word	0x08004a40
 8004108:	08004a3c 	.word	0x08004a3c

0800410c <__retarget_lock_acquire_recursive>:
 800410c:	4770      	bx	lr

0800410e <__retarget_lock_release_recursive>:
 800410e:	4770      	bx	lr

08004110 <_free_r>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	0005      	movs	r5, r0
 8004114:	1e0c      	subs	r4, r1, #0
 8004116:	d010      	beq.n	800413a <_free_r+0x2a>
 8004118:	3c04      	subs	r4, #4
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	da00      	bge.n	8004122 <_free_r+0x12>
 8004120:	18e4      	adds	r4, r4, r3
 8004122:	0028      	movs	r0, r5
 8004124:	f000 f8e0 	bl	80042e8 <__malloc_lock>
 8004128:	4a1d      	ldr	r2, [pc, #116]	@ (80041a0 <_free_r+0x90>)
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <_free_r+0x2c>
 8004130:	6063      	str	r3, [r4, #4]
 8004132:	6014      	str	r4, [r2, #0]
 8004134:	0028      	movs	r0, r5
 8004136:	f000 f8df 	bl	80042f8 <__malloc_unlock>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	42a3      	cmp	r3, r4
 800413e:	d908      	bls.n	8004152 <_free_r+0x42>
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	1821      	adds	r1, r4, r0
 8004144:	428b      	cmp	r3, r1
 8004146:	d1f3      	bne.n	8004130 <_free_r+0x20>
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	1809      	adds	r1, r1, r0
 800414e:	6021      	str	r1, [r4, #0]
 8004150:	e7ee      	b.n	8004130 <_free_r+0x20>
 8004152:	001a      	movs	r2, r3
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <_free_r+0x4e>
 800415a:	42a3      	cmp	r3, r4
 800415c:	d9f9      	bls.n	8004152 <_free_r+0x42>
 800415e:	6811      	ldr	r1, [r2, #0]
 8004160:	1850      	adds	r0, r2, r1
 8004162:	42a0      	cmp	r0, r4
 8004164:	d10b      	bne.n	800417e <_free_r+0x6e>
 8004166:	6820      	ldr	r0, [r4, #0]
 8004168:	1809      	adds	r1, r1, r0
 800416a:	1850      	adds	r0, r2, r1
 800416c:	6011      	str	r1, [r2, #0]
 800416e:	4283      	cmp	r3, r0
 8004170:	d1e0      	bne.n	8004134 <_free_r+0x24>
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	1841      	adds	r1, r0, r1
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	6053      	str	r3, [r2, #4]
 800417c:	e7da      	b.n	8004134 <_free_r+0x24>
 800417e:	42a0      	cmp	r0, r4
 8004180:	d902      	bls.n	8004188 <_free_r+0x78>
 8004182:	230c      	movs	r3, #12
 8004184:	602b      	str	r3, [r5, #0]
 8004186:	e7d5      	b.n	8004134 <_free_r+0x24>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	1821      	adds	r1, r4, r0
 800418c:	428b      	cmp	r3, r1
 800418e:	d103      	bne.n	8004198 <_free_r+0x88>
 8004190:	6819      	ldr	r1, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	1809      	adds	r1, r1, r0
 8004196:	6021      	str	r1, [r4, #0]
 8004198:	6063      	str	r3, [r4, #4]
 800419a:	6054      	str	r4, [r2, #4]
 800419c:	e7ca      	b.n	8004134 <_free_r+0x24>
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	200005f8 	.word	0x200005f8

080041a4 <sbrk_aligned>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4e0f      	ldr	r6, [pc, #60]	@ (80041e4 <sbrk_aligned+0x40>)
 80041a8:	000d      	movs	r5, r1
 80041aa:	6831      	ldr	r1, [r6, #0]
 80041ac:	0004      	movs	r4, r0
 80041ae:	2900      	cmp	r1, #0
 80041b0:	d102      	bne.n	80041b8 <sbrk_aligned+0x14>
 80041b2:	f000 fb99 	bl	80048e8 <_sbrk_r>
 80041b6:	6030      	str	r0, [r6, #0]
 80041b8:	0029      	movs	r1, r5
 80041ba:	0020      	movs	r0, r4
 80041bc:	f000 fb94 	bl	80048e8 <_sbrk_r>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d103      	bne.n	80041cc <sbrk_aligned+0x28>
 80041c4:	2501      	movs	r5, #1
 80041c6:	426d      	negs	r5, r5
 80041c8:	0028      	movs	r0, r5
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	2303      	movs	r3, #3
 80041ce:	1cc5      	adds	r5, r0, #3
 80041d0:	439d      	bics	r5, r3
 80041d2:	42a8      	cmp	r0, r5
 80041d4:	d0f8      	beq.n	80041c8 <sbrk_aligned+0x24>
 80041d6:	1a29      	subs	r1, r5, r0
 80041d8:	0020      	movs	r0, r4
 80041da:	f000 fb85 	bl	80048e8 <_sbrk_r>
 80041de:	3001      	adds	r0, #1
 80041e0:	d1f2      	bne.n	80041c8 <sbrk_aligned+0x24>
 80041e2:	e7ef      	b.n	80041c4 <sbrk_aligned+0x20>
 80041e4:	200005f4 	.word	0x200005f4

080041e8 <_malloc_r>:
 80041e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ea:	2203      	movs	r2, #3
 80041ec:	1ccb      	adds	r3, r1, #3
 80041ee:	4393      	bics	r3, r2
 80041f0:	3308      	adds	r3, #8
 80041f2:	0005      	movs	r5, r0
 80041f4:	001f      	movs	r7, r3
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d234      	bcs.n	8004264 <_malloc_r+0x7c>
 80041fa:	270c      	movs	r7, #12
 80041fc:	42b9      	cmp	r1, r7
 80041fe:	d833      	bhi.n	8004268 <_malloc_r+0x80>
 8004200:	0028      	movs	r0, r5
 8004202:	f000 f871 	bl	80042e8 <__malloc_lock>
 8004206:	4e37      	ldr	r6, [pc, #220]	@ (80042e4 <_malloc_r+0xfc>)
 8004208:	6833      	ldr	r3, [r6, #0]
 800420a:	001c      	movs	r4, r3
 800420c:	2c00      	cmp	r4, #0
 800420e:	d12f      	bne.n	8004270 <_malloc_r+0x88>
 8004210:	0039      	movs	r1, r7
 8004212:	0028      	movs	r0, r5
 8004214:	f7ff ffc6 	bl	80041a4 <sbrk_aligned>
 8004218:	0004      	movs	r4, r0
 800421a:	1c43      	adds	r3, r0, #1
 800421c:	d15f      	bne.n	80042de <_malloc_r+0xf6>
 800421e:	6834      	ldr	r4, [r6, #0]
 8004220:	9400      	str	r4, [sp, #0]
 8004222:	9b00      	ldr	r3, [sp, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d14a      	bne.n	80042be <_malloc_r+0xd6>
 8004228:	2c00      	cmp	r4, #0
 800422a:	d052      	beq.n	80042d2 <_malloc_r+0xea>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	0028      	movs	r0, r5
 8004230:	18e3      	adds	r3, r4, r3
 8004232:	9900      	ldr	r1, [sp, #0]
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	f000 fb57 	bl	80048e8 <_sbrk_r>
 800423a:	9b01      	ldr	r3, [sp, #4]
 800423c:	4283      	cmp	r3, r0
 800423e:	d148      	bne.n	80042d2 <_malloc_r+0xea>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	0028      	movs	r0, r5
 8004244:	1aff      	subs	r7, r7, r3
 8004246:	0039      	movs	r1, r7
 8004248:	f7ff ffac 	bl	80041a4 <sbrk_aligned>
 800424c:	3001      	adds	r0, #1
 800424e:	d040      	beq.n	80042d2 <_malloc_r+0xea>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	19db      	adds	r3, r3, r7
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	6833      	ldr	r3, [r6, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	2a00      	cmp	r2, #0
 800425c:	d133      	bne.n	80042c6 <_malloc_r+0xde>
 800425e:	9b00      	ldr	r3, [sp, #0]
 8004260:	6033      	str	r3, [r6, #0]
 8004262:	e019      	b.n	8004298 <_malloc_r+0xb0>
 8004264:	2b00      	cmp	r3, #0
 8004266:	dac9      	bge.n	80041fc <_malloc_r+0x14>
 8004268:	230c      	movs	r3, #12
 800426a:	602b      	str	r3, [r5, #0]
 800426c:	2000      	movs	r0, #0
 800426e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004270:	6821      	ldr	r1, [r4, #0]
 8004272:	1bc9      	subs	r1, r1, r7
 8004274:	d420      	bmi.n	80042b8 <_malloc_r+0xd0>
 8004276:	290b      	cmp	r1, #11
 8004278:	d90a      	bls.n	8004290 <_malloc_r+0xa8>
 800427a:	19e2      	adds	r2, r4, r7
 800427c:	6027      	str	r7, [r4, #0]
 800427e:	42a3      	cmp	r3, r4
 8004280:	d104      	bne.n	800428c <_malloc_r+0xa4>
 8004282:	6032      	str	r2, [r6, #0]
 8004284:	6863      	ldr	r3, [r4, #4]
 8004286:	6011      	str	r1, [r2, #0]
 8004288:	6053      	str	r3, [r2, #4]
 800428a:	e005      	b.n	8004298 <_malloc_r+0xb0>
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	e7f9      	b.n	8004284 <_malloc_r+0x9c>
 8004290:	6862      	ldr	r2, [r4, #4]
 8004292:	42a3      	cmp	r3, r4
 8004294:	d10e      	bne.n	80042b4 <_malloc_r+0xcc>
 8004296:	6032      	str	r2, [r6, #0]
 8004298:	0028      	movs	r0, r5
 800429a:	f000 f82d 	bl	80042f8 <__malloc_unlock>
 800429e:	0020      	movs	r0, r4
 80042a0:	2207      	movs	r2, #7
 80042a2:	300b      	adds	r0, #11
 80042a4:	1d23      	adds	r3, r4, #4
 80042a6:	4390      	bics	r0, r2
 80042a8:	1ac2      	subs	r2, r0, r3
 80042aa:	4298      	cmp	r0, r3
 80042ac:	d0df      	beq.n	800426e <_malloc_r+0x86>
 80042ae:	1a1b      	subs	r3, r3, r0
 80042b0:	50a3      	str	r3, [r4, r2]
 80042b2:	e7dc      	b.n	800426e <_malloc_r+0x86>
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	e7ef      	b.n	8004298 <_malloc_r+0xb0>
 80042b8:	0023      	movs	r3, r4
 80042ba:	6864      	ldr	r4, [r4, #4]
 80042bc:	e7a6      	b.n	800420c <_malloc_r+0x24>
 80042be:	9c00      	ldr	r4, [sp, #0]
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	e7ad      	b.n	8004222 <_malloc_r+0x3a>
 80042c6:	001a      	movs	r2, r3
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	d1fb      	bne.n	80042c6 <_malloc_r+0xde>
 80042ce:	2300      	movs	r3, #0
 80042d0:	e7da      	b.n	8004288 <_malloc_r+0xa0>
 80042d2:	230c      	movs	r3, #12
 80042d4:	0028      	movs	r0, r5
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	f000 f80e 	bl	80042f8 <__malloc_unlock>
 80042dc:	e7c6      	b.n	800426c <_malloc_r+0x84>
 80042de:	6007      	str	r7, [r0, #0]
 80042e0:	e7da      	b.n	8004298 <_malloc_r+0xb0>
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	200005f8 	.word	0x200005f8

080042e8 <__malloc_lock>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	4802      	ldr	r0, [pc, #8]	@ (80042f4 <__malloc_lock+0xc>)
 80042ec:	f7ff ff0e 	bl	800410c <__retarget_lock_acquire_recursive>
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	200005f0 	.word	0x200005f0

080042f8 <__malloc_unlock>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	4802      	ldr	r0, [pc, #8]	@ (8004304 <__malloc_unlock+0xc>)
 80042fc:	f7ff ff07 	bl	800410e <__retarget_lock_release_recursive>
 8004300:	bd10      	pop	{r4, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	200005f0 	.word	0x200005f0

08004308 <__ssputs_r>:
 8004308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800430a:	688e      	ldr	r6, [r1, #8]
 800430c:	b085      	sub	sp, #20
 800430e:	001f      	movs	r7, r3
 8004310:	000c      	movs	r4, r1
 8004312:	680b      	ldr	r3, [r1, #0]
 8004314:	9002      	str	r0, [sp, #8]
 8004316:	9203      	str	r2, [sp, #12]
 8004318:	42be      	cmp	r6, r7
 800431a:	d830      	bhi.n	800437e <__ssputs_r+0x76>
 800431c:	210c      	movs	r1, #12
 800431e:	5e62      	ldrsh	r2, [r4, r1]
 8004320:	2190      	movs	r1, #144	@ 0x90
 8004322:	00c9      	lsls	r1, r1, #3
 8004324:	420a      	tst	r2, r1
 8004326:	d028      	beq.n	800437a <__ssputs_r+0x72>
 8004328:	2003      	movs	r0, #3
 800432a:	6921      	ldr	r1, [r4, #16]
 800432c:	1a5b      	subs	r3, r3, r1
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	6963      	ldr	r3, [r4, #20]
 8004332:	4343      	muls	r3, r0
 8004334:	9801      	ldr	r0, [sp, #4]
 8004336:	0fdd      	lsrs	r5, r3, #31
 8004338:	18ed      	adds	r5, r5, r3
 800433a:	1c7b      	adds	r3, r7, #1
 800433c:	181b      	adds	r3, r3, r0
 800433e:	106d      	asrs	r5, r5, #1
 8004340:	42ab      	cmp	r3, r5
 8004342:	d900      	bls.n	8004346 <__ssputs_r+0x3e>
 8004344:	001d      	movs	r5, r3
 8004346:	0552      	lsls	r2, r2, #21
 8004348:	d528      	bpl.n	800439c <__ssputs_r+0x94>
 800434a:	0029      	movs	r1, r5
 800434c:	9802      	ldr	r0, [sp, #8]
 800434e:	f7ff ff4b 	bl	80041e8 <_malloc_r>
 8004352:	1e06      	subs	r6, r0, #0
 8004354:	d02c      	beq.n	80043b0 <__ssputs_r+0xa8>
 8004356:	9a01      	ldr	r2, [sp, #4]
 8004358:	6921      	ldr	r1, [r4, #16]
 800435a:	f000 fae2 	bl	8004922 <memcpy>
 800435e:	89a2      	ldrh	r2, [r4, #12]
 8004360:	4b18      	ldr	r3, [pc, #96]	@ (80043c4 <__ssputs_r+0xbc>)
 8004362:	401a      	ands	r2, r3
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	4313      	orrs	r3, r2
 8004368:	81a3      	strh	r3, [r4, #12]
 800436a:	9b01      	ldr	r3, [sp, #4]
 800436c:	6126      	str	r6, [r4, #16]
 800436e:	18f6      	adds	r6, r6, r3
 8004370:	6026      	str	r6, [r4, #0]
 8004372:	003e      	movs	r6, r7
 8004374:	6165      	str	r5, [r4, #20]
 8004376:	1aed      	subs	r5, r5, r3
 8004378:	60a5      	str	r5, [r4, #8]
 800437a:	42be      	cmp	r6, r7
 800437c:	d900      	bls.n	8004380 <__ssputs_r+0x78>
 800437e:	003e      	movs	r6, r7
 8004380:	0032      	movs	r2, r6
 8004382:	9903      	ldr	r1, [sp, #12]
 8004384:	6820      	ldr	r0, [r4, #0]
 8004386:	f000 fa9b 	bl	80048c0 <memmove>
 800438a:	2000      	movs	r0, #0
 800438c:	68a3      	ldr	r3, [r4, #8]
 800438e:	1b9b      	subs	r3, r3, r6
 8004390:	60a3      	str	r3, [r4, #8]
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	199b      	adds	r3, r3, r6
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	b005      	add	sp, #20
 800439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439c:	002a      	movs	r2, r5
 800439e:	9802      	ldr	r0, [sp, #8]
 80043a0:	f000 fac8 	bl	8004934 <_realloc_r>
 80043a4:	1e06      	subs	r6, r0, #0
 80043a6:	d1e0      	bne.n	800436a <__ssputs_r+0x62>
 80043a8:	6921      	ldr	r1, [r4, #16]
 80043aa:	9802      	ldr	r0, [sp, #8]
 80043ac:	f7ff feb0 	bl	8004110 <_free_r>
 80043b0:	230c      	movs	r3, #12
 80043b2:	2001      	movs	r0, #1
 80043b4:	9a02      	ldr	r2, [sp, #8]
 80043b6:	4240      	negs	r0, r0
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	89a2      	ldrh	r2, [r4, #12]
 80043bc:	3334      	adds	r3, #52	@ 0x34
 80043be:	4313      	orrs	r3, r2
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	e7e9      	b.n	8004398 <__ssputs_r+0x90>
 80043c4:	fffffb7f 	.word	0xfffffb7f

080043c8 <_svfiprintf_r>:
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	b0a1      	sub	sp, #132	@ 0x84
 80043cc:	9003      	str	r0, [sp, #12]
 80043ce:	001d      	movs	r5, r3
 80043d0:	898b      	ldrh	r3, [r1, #12]
 80043d2:	000f      	movs	r7, r1
 80043d4:	0016      	movs	r6, r2
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	d511      	bpl.n	80043fe <_svfiprintf_r+0x36>
 80043da:	690b      	ldr	r3, [r1, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10e      	bne.n	80043fe <_svfiprintf_r+0x36>
 80043e0:	2140      	movs	r1, #64	@ 0x40
 80043e2:	f7ff ff01 	bl	80041e8 <_malloc_r>
 80043e6:	6038      	str	r0, [r7, #0]
 80043e8:	6138      	str	r0, [r7, #16]
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d105      	bne.n	80043fa <_svfiprintf_r+0x32>
 80043ee:	230c      	movs	r3, #12
 80043f0:	9a03      	ldr	r2, [sp, #12]
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	2001      	movs	r0, #1
 80043f6:	4240      	negs	r0, r0
 80043f8:	e0cf      	b.n	800459a <_svfiprintf_r+0x1d2>
 80043fa:	2340      	movs	r3, #64	@ 0x40
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	2300      	movs	r3, #0
 8004400:	ac08      	add	r4, sp, #32
 8004402:	6163      	str	r3, [r4, #20]
 8004404:	3320      	adds	r3, #32
 8004406:	7663      	strb	r3, [r4, #25]
 8004408:	3310      	adds	r3, #16
 800440a:	76a3      	strb	r3, [r4, #26]
 800440c:	9507      	str	r5, [sp, #28]
 800440e:	0035      	movs	r5, r6
 8004410:	782b      	ldrb	r3, [r5, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <_svfiprintf_r+0x52>
 8004416:	2b25      	cmp	r3, #37	@ 0x25
 8004418:	d148      	bne.n	80044ac <_svfiprintf_r+0xe4>
 800441a:	1bab      	subs	r3, r5, r6
 800441c:	9305      	str	r3, [sp, #20]
 800441e:	42b5      	cmp	r5, r6
 8004420:	d00b      	beq.n	800443a <_svfiprintf_r+0x72>
 8004422:	0032      	movs	r2, r6
 8004424:	0039      	movs	r1, r7
 8004426:	9803      	ldr	r0, [sp, #12]
 8004428:	f7ff ff6e 	bl	8004308 <__ssputs_r>
 800442c:	3001      	adds	r0, #1
 800442e:	d100      	bne.n	8004432 <_svfiprintf_r+0x6a>
 8004430:	e0ae      	b.n	8004590 <_svfiprintf_r+0x1c8>
 8004432:	6963      	ldr	r3, [r4, #20]
 8004434:	9a05      	ldr	r2, [sp, #20]
 8004436:	189b      	adds	r3, r3, r2
 8004438:	6163      	str	r3, [r4, #20]
 800443a:	782b      	ldrb	r3, [r5, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d100      	bne.n	8004442 <_svfiprintf_r+0x7a>
 8004440:	e0a6      	b.n	8004590 <_svfiprintf_r+0x1c8>
 8004442:	2201      	movs	r2, #1
 8004444:	2300      	movs	r3, #0
 8004446:	4252      	negs	r2, r2
 8004448:	6062      	str	r2, [r4, #4]
 800444a:	a904      	add	r1, sp, #16
 800444c:	3254      	adds	r2, #84	@ 0x54
 800444e:	1852      	adds	r2, r2, r1
 8004450:	1c6e      	adds	r6, r5, #1
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	60e3      	str	r3, [r4, #12]
 8004456:	60a3      	str	r3, [r4, #8]
 8004458:	7013      	strb	r3, [r2, #0]
 800445a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800445c:	4b54      	ldr	r3, [pc, #336]	@ (80045b0 <_svfiprintf_r+0x1e8>)
 800445e:	2205      	movs	r2, #5
 8004460:	0018      	movs	r0, r3
 8004462:	7831      	ldrb	r1, [r6, #0]
 8004464:	9305      	str	r3, [sp, #20]
 8004466:	f000 fa51 	bl	800490c <memchr>
 800446a:	1c75      	adds	r5, r6, #1
 800446c:	2800      	cmp	r0, #0
 800446e:	d11f      	bne.n	80044b0 <_svfiprintf_r+0xe8>
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	06d3      	lsls	r3, r2, #27
 8004474:	d504      	bpl.n	8004480 <_svfiprintf_r+0xb8>
 8004476:	2353      	movs	r3, #83	@ 0x53
 8004478:	a904      	add	r1, sp, #16
 800447a:	185b      	adds	r3, r3, r1
 800447c:	2120      	movs	r1, #32
 800447e:	7019      	strb	r1, [r3, #0]
 8004480:	0713      	lsls	r3, r2, #28
 8004482:	d504      	bpl.n	800448e <_svfiprintf_r+0xc6>
 8004484:	2353      	movs	r3, #83	@ 0x53
 8004486:	a904      	add	r1, sp, #16
 8004488:	185b      	adds	r3, r3, r1
 800448a:	212b      	movs	r1, #43	@ 0x2b
 800448c:	7019      	strb	r1, [r3, #0]
 800448e:	7833      	ldrb	r3, [r6, #0]
 8004490:	2b2a      	cmp	r3, #42	@ 0x2a
 8004492:	d016      	beq.n	80044c2 <_svfiprintf_r+0xfa>
 8004494:	0035      	movs	r5, r6
 8004496:	2100      	movs	r1, #0
 8004498:	200a      	movs	r0, #10
 800449a:	68e3      	ldr	r3, [r4, #12]
 800449c:	782a      	ldrb	r2, [r5, #0]
 800449e:	1c6e      	adds	r6, r5, #1
 80044a0:	3a30      	subs	r2, #48	@ 0x30
 80044a2:	2a09      	cmp	r2, #9
 80044a4:	d950      	bls.n	8004548 <_svfiprintf_r+0x180>
 80044a6:	2900      	cmp	r1, #0
 80044a8:	d111      	bne.n	80044ce <_svfiprintf_r+0x106>
 80044aa:	e017      	b.n	80044dc <_svfiprintf_r+0x114>
 80044ac:	3501      	adds	r5, #1
 80044ae:	e7af      	b.n	8004410 <_svfiprintf_r+0x48>
 80044b0:	9b05      	ldr	r3, [sp, #20]
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	1ac0      	subs	r0, r0, r3
 80044b6:	2301      	movs	r3, #1
 80044b8:	4083      	lsls	r3, r0
 80044ba:	4313      	orrs	r3, r2
 80044bc:	002e      	movs	r6, r5
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	e7cc      	b.n	800445c <_svfiprintf_r+0x94>
 80044c2:	9b07      	ldr	r3, [sp, #28]
 80044c4:	1d19      	adds	r1, r3, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	9107      	str	r1, [sp, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	db01      	blt.n	80044d2 <_svfiprintf_r+0x10a>
 80044ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044d0:	e004      	b.n	80044dc <_svfiprintf_r+0x114>
 80044d2:	425b      	negs	r3, r3
 80044d4:	60e3      	str	r3, [r4, #12]
 80044d6:	2302      	movs	r3, #2
 80044d8:	4313      	orrs	r3, r2
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	782b      	ldrb	r3, [r5, #0]
 80044de:	2b2e      	cmp	r3, #46	@ 0x2e
 80044e0:	d10c      	bne.n	80044fc <_svfiprintf_r+0x134>
 80044e2:	786b      	ldrb	r3, [r5, #1]
 80044e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044e6:	d134      	bne.n	8004552 <_svfiprintf_r+0x18a>
 80044e8:	9b07      	ldr	r3, [sp, #28]
 80044ea:	3502      	adds	r5, #2
 80044ec:	1d1a      	adds	r2, r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	9207      	str	r2, [sp, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da01      	bge.n	80044fa <_svfiprintf_r+0x132>
 80044f6:	2301      	movs	r3, #1
 80044f8:	425b      	negs	r3, r3
 80044fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80044fc:	4e2d      	ldr	r6, [pc, #180]	@ (80045b4 <_svfiprintf_r+0x1ec>)
 80044fe:	2203      	movs	r2, #3
 8004500:	0030      	movs	r0, r6
 8004502:	7829      	ldrb	r1, [r5, #0]
 8004504:	f000 fa02 	bl	800490c <memchr>
 8004508:	2800      	cmp	r0, #0
 800450a:	d006      	beq.n	800451a <_svfiprintf_r+0x152>
 800450c:	2340      	movs	r3, #64	@ 0x40
 800450e:	1b80      	subs	r0, r0, r6
 8004510:	4083      	lsls	r3, r0
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	3501      	adds	r5, #1
 8004516:	4313      	orrs	r3, r2
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	7829      	ldrb	r1, [r5, #0]
 800451c:	2206      	movs	r2, #6
 800451e:	4826      	ldr	r0, [pc, #152]	@ (80045b8 <_svfiprintf_r+0x1f0>)
 8004520:	1c6e      	adds	r6, r5, #1
 8004522:	7621      	strb	r1, [r4, #24]
 8004524:	f000 f9f2 	bl	800490c <memchr>
 8004528:	2800      	cmp	r0, #0
 800452a:	d038      	beq.n	800459e <_svfiprintf_r+0x1d6>
 800452c:	4b23      	ldr	r3, [pc, #140]	@ (80045bc <_svfiprintf_r+0x1f4>)
 800452e:	2b00      	cmp	r3, #0
 8004530:	d122      	bne.n	8004578 <_svfiprintf_r+0x1b0>
 8004532:	2207      	movs	r2, #7
 8004534:	9b07      	ldr	r3, [sp, #28]
 8004536:	3307      	adds	r3, #7
 8004538:	4393      	bics	r3, r2
 800453a:	3308      	adds	r3, #8
 800453c:	9307      	str	r3, [sp, #28]
 800453e:	6963      	ldr	r3, [r4, #20]
 8004540:	9a04      	ldr	r2, [sp, #16]
 8004542:	189b      	adds	r3, r3, r2
 8004544:	6163      	str	r3, [r4, #20]
 8004546:	e762      	b.n	800440e <_svfiprintf_r+0x46>
 8004548:	4343      	muls	r3, r0
 800454a:	0035      	movs	r5, r6
 800454c:	2101      	movs	r1, #1
 800454e:	189b      	adds	r3, r3, r2
 8004550:	e7a4      	b.n	800449c <_svfiprintf_r+0xd4>
 8004552:	2300      	movs	r3, #0
 8004554:	200a      	movs	r0, #10
 8004556:	0019      	movs	r1, r3
 8004558:	3501      	adds	r5, #1
 800455a:	6063      	str	r3, [r4, #4]
 800455c:	782a      	ldrb	r2, [r5, #0]
 800455e:	1c6e      	adds	r6, r5, #1
 8004560:	3a30      	subs	r2, #48	@ 0x30
 8004562:	2a09      	cmp	r2, #9
 8004564:	d903      	bls.n	800456e <_svfiprintf_r+0x1a6>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0c8      	beq.n	80044fc <_svfiprintf_r+0x134>
 800456a:	9109      	str	r1, [sp, #36]	@ 0x24
 800456c:	e7c6      	b.n	80044fc <_svfiprintf_r+0x134>
 800456e:	4341      	muls	r1, r0
 8004570:	0035      	movs	r5, r6
 8004572:	2301      	movs	r3, #1
 8004574:	1889      	adds	r1, r1, r2
 8004576:	e7f1      	b.n	800455c <_svfiprintf_r+0x194>
 8004578:	aa07      	add	r2, sp, #28
 800457a:	9200      	str	r2, [sp, #0]
 800457c:	0021      	movs	r1, r4
 800457e:	003a      	movs	r2, r7
 8004580:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <_svfiprintf_r+0x1f8>)
 8004582:	9803      	ldr	r0, [sp, #12]
 8004584:	e000      	b.n	8004588 <_svfiprintf_r+0x1c0>
 8004586:	bf00      	nop
 8004588:	9004      	str	r0, [sp, #16]
 800458a:	9b04      	ldr	r3, [sp, #16]
 800458c:	3301      	adds	r3, #1
 800458e:	d1d6      	bne.n	800453e <_svfiprintf_r+0x176>
 8004590:	89bb      	ldrh	r3, [r7, #12]
 8004592:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004594:	065b      	lsls	r3, r3, #25
 8004596:	d500      	bpl.n	800459a <_svfiprintf_r+0x1d2>
 8004598:	e72c      	b.n	80043f4 <_svfiprintf_r+0x2c>
 800459a:	b021      	add	sp, #132	@ 0x84
 800459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459e:	aa07      	add	r2, sp, #28
 80045a0:	9200      	str	r2, [sp, #0]
 80045a2:	0021      	movs	r1, r4
 80045a4:	003a      	movs	r2, r7
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <_svfiprintf_r+0x1f8>)
 80045a8:	9803      	ldr	r0, [sp, #12]
 80045aa:	f000 f87b 	bl	80046a4 <_printf_i>
 80045ae:	e7eb      	b.n	8004588 <_svfiprintf_r+0x1c0>
 80045b0:	08004a01 	.word	0x08004a01
 80045b4:	08004a07 	.word	0x08004a07
 80045b8:	08004a0b 	.word	0x08004a0b
 80045bc:	00000000 	.word	0x00000000
 80045c0:	08004309 	.word	0x08004309

080045c4 <_printf_common>:
 80045c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045c6:	0016      	movs	r6, r2
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	688a      	ldr	r2, [r1, #8]
 80045cc:	690b      	ldr	r3, [r1, #16]
 80045ce:	000c      	movs	r4, r1
 80045d0:	9000      	str	r0, [sp, #0]
 80045d2:	4293      	cmp	r3, r2
 80045d4:	da00      	bge.n	80045d8 <_printf_common+0x14>
 80045d6:	0013      	movs	r3, r2
 80045d8:	0022      	movs	r2, r4
 80045da:	6033      	str	r3, [r6, #0]
 80045dc:	3243      	adds	r2, #67	@ 0x43
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	2a00      	cmp	r2, #0
 80045e2:	d001      	beq.n	80045e8 <_printf_common+0x24>
 80045e4:	3301      	adds	r3, #1
 80045e6:	6033      	str	r3, [r6, #0]
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	069b      	lsls	r3, r3, #26
 80045ec:	d502      	bpl.n	80045f4 <_printf_common+0x30>
 80045ee:	6833      	ldr	r3, [r6, #0]
 80045f0:	3302      	adds	r3, #2
 80045f2:	6033      	str	r3, [r6, #0]
 80045f4:	6822      	ldr	r2, [r4, #0]
 80045f6:	2306      	movs	r3, #6
 80045f8:	0015      	movs	r5, r2
 80045fa:	401d      	ands	r5, r3
 80045fc:	421a      	tst	r2, r3
 80045fe:	d027      	beq.n	8004650 <_printf_common+0x8c>
 8004600:	0023      	movs	r3, r4
 8004602:	3343      	adds	r3, #67	@ 0x43
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	1e5a      	subs	r2, r3, #1
 8004608:	4193      	sbcs	r3, r2
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	0692      	lsls	r2, r2, #26
 800460e:	d430      	bmi.n	8004672 <_printf_common+0xae>
 8004610:	0022      	movs	r2, r4
 8004612:	9901      	ldr	r1, [sp, #4]
 8004614:	9800      	ldr	r0, [sp, #0]
 8004616:	9d08      	ldr	r5, [sp, #32]
 8004618:	3243      	adds	r2, #67	@ 0x43
 800461a:	47a8      	blx	r5
 800461c:	3001      	adds	r0, #1
 800461e:	d025      	beq.n	800466c <_printf_common+0xa8>
 8004620:	2206      	movs	r2, #6
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	2500      	movs	r5, #0
 8004626:	4013      	ands	r3, r2
 8004628:	2b04      	cmp	r3, #4
 800462a:	d105      	bne.n	8004638 <_printf_common+0x74>
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	68e5      	ldr	r5, [r4, #12]
 8004630:	1aed      	subs	r5, r5, r3
 8004632:	43eb      	mvns	r3, r5
 8004634:	17db      	asrs	r3, r3, #31
 8004636:	401d      	ands	r5, r3
 8004638:	68a3      	ldr	r3, [r4, #8]
 800463a:	6922      	ldr	r2, [r4, #16]
 800463c:	4293      	cmp	r3, r2
 800463e:	dd01      	ble.n	8004644 <_printf_common+0x80>
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	18ed      	adds	r5, r5, r3
 8004644:	2600      	movs	r6, #0
 8004646:	42b5      	cmp	r5, r6
 8004648:	d120      	bne.n	800468c <_printf_common+0xc8>
 800464a:	2000      	movs	r0, #0
 800464c:	e010      	b.n	8004670 <_printf_common+0xac>
 800464e:	3501      	adds	r5, #1
 8004650:	68e3      	ldr	r3, [r4, #12]
 8004652:	6832      	ldr	r2, [r6, #0]
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	42ab      	cmp	r3, r5
 8004658:	ddd2      	ble.n	8004600 <_printf_common+0x3c>
 800465a:	0022      	movs	r2, r4
 800465c:	2301      	movs	r3, #1
 800465e:	9901      	ldr	r1, [sp, #4]
 8004660:	9800      	ldr	r0, [sp, #0]
 8004662:	9f08      	ldr	r7, [sp, #32]
 8004664:	3219      	adds	r2, #25
 8004666:	47b8      	blx	r7
 8004668:	3001      	adds	r0, #1
 800466a:	d1f0      	bne.n	800464e <_printf_common+0x8a>
 800466c:	2001      	movs	r0, #1
 800466e:	4240      	negs	r0, r0
 8004670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004672:	2030      	movs	r0, #48	@ 0x30
 8004674:	18e1      	adds	r1, r4, r3
 8004676:	3143      	adds	r1, #67	@ 0x43
 8004678:	7008      	strb	r0, [r1, #0]
 800467a:	0021      	movs	r1, r4
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	3145      	adds	r1, #69	@ 0x45
 8004680:	7809      	ldrb	r1, [r1, #0]
 8004682:	18a2      	adds	r2, r4, r2
 8004684:	3243      	adds	r2, #67	@ 0x43
 8004686:	3302      	adds	r3, #2
 8004688:	7011      	strb	r1, [r2, #0]
 800468a:	e7c1      	b.n	8004610 <_printf_common+0x4c>
 800468c:	0022      	movs	r2, r4
 800468e:	2301      	movs	r3, #1
 8004690:	9901      	ldr	r1, [sp, #4]
 8004692:	9800      	ldr	r0, [sp, #0]
 8004694:	9f08      	ldr	r7, [sp, #32]
 8004696:	321a      	adds	r2, #26
 8004698:	47b8      	blx	r7
 800469a:	3001      	adds	r0, #1
 800469c:	d0e6      	beq.n	800466c <_printf_common+0xa8>
 800469e:	3601      	adds	r6, #1
 80046a0:	e7d1      	b.n	8004646 <_printf_common+0x82>
	...

080046a4 <_printf_i>:
 80046a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a6:	b08b      	sub	sp, #44	@ 0x2c
 80046a8:	9206      	str	r2, [sp, #24]
 80046aa:	000a      	movs	r2, r1
 80046ac:	3243      	adds	r2, #67	@ 0x43
 80046ae:	9307      	str	r3, [sp, #28]
 80046b0:	9005      	str	r0, [sp, #20]
 80046b2:	9203      	str	r2, [sp, #12]
 80046b4:	7e0a      	ldrb	r2, [r1, #24]
 80046b6:	000c      	movs	r4, r1
 80046b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80046ba:	2a78      	cmp	r2, #120	@ 0x78
 80046bc:	d809      	bhi.n	80046d2 <_printf_i+0x2e>
 80046be:	2a62      	cmp	r2, #98	@ 0x62
 80046c0:	d80b      	bhi.n	80046da <_printf_i+0x36>
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	d100      	bne.n	80046c8 <_printf_i+0x24>
 80046c6:	e0bc      	b.n	8004842 <_printf_i+0x19e>
 80046c8:	497b      	ldr	r1, [pc, #492]	@ (80048b8 <_printf_i+0x214>)
 80046ca:	9104      	str	r1, [sp, #16]
 80046cc:	2a58      	cmp	r2, #88	@ 0x58
 80046ce:	d100      	bne.n	80046d2 <_printf_i+0x2e>
 80046d0:	e090      	b.n	80047f4 <_printf_i+0x150>
 80046d2:	0025      	movs	r5, r4
 80046d4:	3542      	adds	r5, #66	@ 0x42
 80046d6:	702a      	strb	r2, [r5, #0]
 80046d8:	e022      	b.n	8004720 <_printf_i+0x7c>
 80046da:	0010      	movs	r0, r2
 80046dc:	3863      	subs	r0, #99	@ 0x63
 80046de:	2815      	cmp	r0, #21
 80046e0:	d8f7      	bhi.n	80046d2 <_printf_i+0x2e>
 80046e2:	f7fb fd11 	bl	8000108 <__gnu_thumb1_case_shi>
 80046e6:	0016      	.short	0x0016
 80046e8:	fff6001f 	.word	0xfff6001f
 80046ec:	fff6fff6 	.word	0xfff6fff6
 80046f0:	001ffff6 	.word	0x001ffff6
 80046f4:	fff6fff6 	.word	0xfff6fff6
 80046f8:	fff6fff6 	.word	0xfff6fff6
 80046fc:	003600a1 	.word	0x003600a1
 8004700:	fff60080 	.word	0xfff60080
 8004704:	00b2fff6 	.word	0x00b2fff6
 8004708:	0036fff6 	.word	0x0036fff6
 800470c:	fff6fff6 	.word	0xfff6fff6
 8004710:	0084      	.short	0x0084
 8004712:	0025      	movs	r5, r4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	3542      	adds	r5, #66	@ 0x42
 8004718:	1d11      	adds	r1, r2, #4
 800471a:	6019      	str	r1, [r3, #0]
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	702b      	strb	r3, [r5, #0]
 8004720:	2301      	movs	r3, #1
 8004722:	e0a0      	b.n	8004866 <_printf_i+0x1c2>
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	6809      	ldr	r1, [r1, #0]
 8004728:	1d02      	adds	r2, r0, #4
 800472a:	060d      	lsls	r5, r1, #24
 800472c:	d50b      	bpl.n	8004746 <_printf_i+0xa2>
 800472e:	6806      	ldr	r6, [r0, #0]
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	2e00      	cmp	r6, #0
 8004734:	da03      	bge.n	800473e <_printf_i+0x9a>
 8004736:	232d      	movs	r3, #45	@ 0x2d
 8004738:	9a03      	ldr	r2, [sp, #12]
 800473a:	4276      	negs	r6, r6
 800473c:	7013      	strb	r3, [r2, #0]
 800473e:	4b5e      	ldr	r3, [pc, #376]	@ (80048b8 <_printf_i+0x214>)
 8004740:	270a      	movs	r7, #10
 8004742:	9304      	str	r3, [sp, #16]
 8004744:	e018      	b.n	8004778 <_printf_i+0xd4>
 8004746:	6806      	ldr	r6, [r0, #0]
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	0649      	lsls	r1, r1, #25
 800474c:	d5f1      	bpl.n	8004732 <_printf_i+0x8e>
 800474e:	b236      	sxth	r6, r6
 8004750:	e7ef      	b.n	8004732 <_printf_i+0x8e>
 8004752:	6808      	ldr	r0, [r1, #0]
 8004754:	6819      	ldr	r1, [r3, #0]
 8004756:	c940      	ldmia	r1!, {r6}
 8004758:	0605      	lsls	r5, r0, #24
 800475a:	d402      	bmi.n	8004762 <_printf_i+0xbe>
 800475c:	0640      	lsls	r0, r0, #25
 800475e:	d500      	bpl.n	8004762 <_printf_i+0xbe>
 8004760:	b2b6      	uxth	r6, r6
 8004762:	6019      	str	r1, [r3, #0]
 8004764:	4b54      	ldr	r3, [pc, #336]	@ (80048b8 <_printf_i+0x214>)
 8004766:	270a      	movs	r7, #10
 8004768:	9304      	str	r3, [sp, #16]
 800476a:	2a6f      	cmp	r2, #111	@ 0x6f
 800476c:	d100      	bne.n	8004770 <_printf_i+0xcc>
 800476e:	3f02      	subs	r7, #2
 8004770:	0023      	movs	r3, r4
 8004772:	2200      	movs	r2, #0
 8004774:	3343      	adds	r3, #67	@ 0x43
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	60a3      	str	r3, [r4, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	db03      	blt.n	8004788 <_printf_i+0xe4>
 8004780:	2104      	movs	r1, #4
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	438a      	bics	r2, r1
 8004786:	6022      	str	r2, [r4, #0]
 8004788:	2e00      	cmp	r6, #0
 800478a:	d102      	bne.n	8004792 <_printf_i+0xee>
 800478c:	9d03      	ldr	r5, [sp, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00c      	beq.n	80047ac <_printf_i+0x108>
 8004792:	9d03      	ldr	r5, [sp, #12]
 8004794:	0030      	movs	r0, r6
 8004796:	0039      	movs	r1, r7
 8004798:	f7fb fd46 	bl	8000228 <__aeabi_uidivmod>
 800479c:	9b04      	ldr	r3, [sp, #16]
 800479e:	3d01      	subs	r5, #1
 80047a0:	5c5b      	ldrb	r3, [r3, r1]
 80047a2:	702b      	strb	r3, [r5, #0]
 80047a4:	0033      	movs	r3, r6
 80047a6:	0006      	movs	r6, r0
 80047a8:	429f      	cmp	r7, r3
 80047aa:	d9f3      	bls.n	8004794 <_printf_i+0xf0>
 80047ac:	2f08      	cmp	r7, #8
 80047ae:	d109      	bne.n	80047c4 <_printf_i+0x120>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	07db      	lsls	r3, r3, #31
 80047b4:	d506      	bpl.n	80047c4 <_printf_i+0x120>
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	dc02      	bgt.n	80047c4 <_printf_i+0x120>
 80047be:	2330      	movs	r3, #48	@ 0x30
 80047c0:	3d01      	subs	r5, #1
 80047c2:	702b      	strb	r3, [r5, #0]
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	1b5b      	subs	r3, r3, r5
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	9b07      	ldr	r3, [sp, #28]
 80047cc:	0021      	movs	r1, r4
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	9805      	ldr	r0, [sp, #20]
 80047d2:	9b06      	ldr	r3, [sp, #24]
 80047d4:	aa09      	add	r2, sp, #36	@ 0x24
 80047d6:	f7ff fef5 	bl	80045c4 <_printf_common>
 80047da:	3001      	adds	r0, #1
 80047dc:	d148      	bne.n	8004870 <_printf_i+0x1cc>
 80047de:	2001      	movs	r0, #1
 80047e0:	4240      	negs	r0, r0
 80047e2:	b00b      	add	sp, #44	@ 0x2c
 80047e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e6:	2220      	movs	r2, #32
 80047e8:	6809      	ldr	r1, [r1, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	6022      	str	r2, [r4, #0]
 80047ee:	2278      	movs	r2, #120	@ 0x78
 80047f0:	4932      	ldr	r1, [pc, #200]	@ (80048bc <_printf_i+0x218>)
 80047f2:	9104      	str	r1, [sp, #16]
 80047f4:	0021      	movs	r1, r4
 80047f6:	3145      	adds	r1, #69	@ 0x45
 80047f8:	700a      	strb	r2, [r1, #0]
 80047fa:	6819      	ldr	r1, [r3, #0]
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	c940      	ldmia	r1!, {r6}
 8004800:	0610      	lsls	r0, r2, #24
 8004802:	d402      	bmi.n	800480a <_printf_i+0x166>
 8004804:	0650      	lsls	r0, r2, #25
 8004806:	d500      	bpl.n	800480a <_printf_i+0x166>
 8004808:	b2b6      	uxth	r6, r6
 800480a:	6019      	str	r1, [r3, #0]
 800480c:	07d3      	lsls	r3, r2, #31
 800480e:	d502      	bpl.n	8004816 <_printf_i+0x172>
 8004810:	2320      	movs	r3, #32
 8004812:	4313      	orrs	r3, r2
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	2e00      	cmp	r6, #0
 8004818:	d001      	beq.n	800481e <_printf_i+0x17a>
 800481a:	2710      	movs	r7, #16
 800481c:	e7a8      	b.n	8004770 <_printf_i+0xcc>
 800481e:	2220      	movs	r2, #32
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	4393      	bics	r3, r2
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	e7f8      	b.n	800481a <_printf_i+0x176>
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	680d      	ldr	r5, [r1, #0]
 800482c:	1d10      	adds	r0, r2, #4
 800482e:	6949      	ldr	r1, [r1, #20]
 8004830:	6018      	str	r0, [r3, #0]
 8004832:	6813      	ldr	r3, [r2, #0]
 8004834:	062e      	lsls	r6, r5, #24
 8004836:	d501      	bpl.n	800483c <_printf_i+0x198>
 8004838:	6019      	str	r1, [r3, #0]
 800483a:	e002      	b.n	8004842 <_printf_i+0x19e>
 800483c:	066d      	lsls	r5, r5, #25
 800483e:	d5fb      	bpl.n	8004838 <_printf_i+0x194>
 8004840:	8019      	strh	r1, [r3, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	9d03      	ldr	r5, [sp, #12]
 8004846:	6123      	str	r3, [r4, #16]
 8004848:	e7bf      	b.n	80047ca <_printf_i+0x126>
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	1d11      	adds	r1, r2, #4
 800484e:	6019      	str	r1, [r3, #0]
 8004850:	6815      	ldr	r5, [r2, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	0028      	movs	r0, r5
 8004856:	6862      	ldr	r2, [r4, #4]
 8004858:	f000 f858 	bl	800490c <memchr>
 800485c:	2800      	cmp	r0, #0
 800485e:	d001      	beq.n	8004864 <_printf_i+0x1c0>
 8004860:	1b40      	subs	r0, r0, r5
 8004862:	6060      	str	r0, [r4, #4]
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	6123      	str	r3, [r4, #16]
 8004868:	2300      	movs	r3, #0
 800486a:	9a03      	ldr	r2, [sp, #12]
 800486c:	7013      	strb	r3, [r2, #0]
 800486e:	e7ac      	b.n	80047ca <_printf_i+0x126>
 8004870:	002a      	movs	r2, r5
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	9906      	ldr	r1, [sp, #24]
 8004876:	9805      	ldr	r0, [sp, #20]
 8004878:	9d07      	ldr	r5, [sp, #28]
 800487a:	47a8      	blx	r5
 800487c:	3001      	adds	r0, #1
 800487e:	d0ae      	beq.n	80047de <_printf_i+0x13a>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	079b      	lsls	r3, r3, #30
 8004884:	d415      	bmi.n	80048b2 <_printf_i+0x20e>
 8004886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004888:	68e0      	ldr	r0, [r4, #12]
 800488a:	4298      	cmp	r0, r3
 800488c:	daa9      	bge.n	80047e2 <_printf_i+0x13e>
 800488e:	0018      	movs	r0, r3
 8004890:	e7a7      	b.n	80047e2 <_printf_i+0x13e>
 8004892:	0022      	movs	r2, r4
 8004894:	2301      	movs	r3, #1
 8004896:	9906      	ldr	r1, [sp, #24]
 8004898:	9805      	ldr	r0, [sp, #20]
 800489a:	9e07      	ldr	r6, [sp, #28]
 800489c:	3219      	adds	r2, #25
 800489e:	47b0      	blx	r6
 80048a0:	3001      	adds	r0, #1
 80048a2:	d09c      	beq.n	80047de <_printf_i+0x13a>
 80048a4:	3501      	adds	r5, #1
 80048a6:	68e3      	ldr	r3, [r4, #12]
 80048a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	42ab      	cmp	r3, r5
 80048ae:	dcf0      	bgt.n	8004892 <_printf_i+0x1ee>
 80048b0:	e7e9      	b.n	8004886 <_printf_i+0x1e2>
 80048b2:	2500      	movs	r5, #0
 80048b4:	e7f7      	b.n	80048a6 <_printf_i+0x202>
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	08004a12 	.word	0x08004a12
 80048bc:	08004a23 	.word	0x08004a23

080048c0 <memmove>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4288      	cmp	r0, r1
 80048c4:	d806      	bhi.n	80048d4 <memmove+0x14>
 80048c6:	2300      	movs	r3, #0
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d008      	beq.n	80048de <memmove+0x1e>
 80048cc:	5ccc      	ldrb	r4, [r1, r3]
 80048ce:	54c4      	strb	r4, [r0, r3]
 80048d0:	3301      	adds	r3, #1
 80048d2:	e7f9      	b.n	80048c8 <memmove+0x8>
 80048d4:	188b      	adds	r3, r1, r2
 80048d6:	4298      	cmp	r0, r3
 80048d8:	d2f5      	bcs.n	80048c6 <memmove+0x6>
 80048da:	3a01      	subs	r2, #1
 80048dc:	d200      	bcs.n	80048e0 <memmove+0x20>
 80048de:	bd10      	pop	{r4, pc}
 80048e0:	5c8b      	ldrb	r3, [r1, r2]
 80048e2:	5483      	strb	r3, [r0, r2]
 80048e4:	e7f9      	b.n	80048da <memmove+0x1a>
	...

080048e8 <_sbrk_r>:
 80048e8:	2300      	movs	r3, #0
 80048ea:	b570      	push	{r4, r5, r6, lr}
 80048ec:	4d06      	ldr	r5, [pc, #24]	@ (8004908 <_sbrk_r+0x20>)
 80048ee:	0004      	movs	r4, r0
 80048f0:	0008      	movs	r0, r1
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	f7fc fbf2 	bl	80010dc <_sbrk>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d103      	bne.n	8004904 <_sbrk_r+0x1c>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d000      	beq.n	8004904 <_sbrk_r+0x1c>
 8004902:	6023      	str	r3, [r4, #0]
 8004904:	bd70      	pop	{r4, r5, r6, pc}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	200005ec 	.word	0x200005ec

0800490c <memchr>:
 800490c:	b2c9      	uxtb	r1, r1
 800490e:	1882      	adds	r2, r0, r2
 8004910:	4290      	cmp	r0, r2
 8004912:	d101      	bne.n	8004918 <memchr+0xc>
 8004914:	2000      	movs	r0, #0
 8004916:	4770      	bx	lr
 8004918:	7803      	ldrb	r3, [r0, #0]
 800491a:	428b      	cmp	r3, r1
 800491c:	d0fb      	beq.n	8004916 <memchr+0xa>
 800491e:	3001      	adds	r0, #1
 8004920:	e7f6      	b.n	8004910 <memchr+0x4>

08004922 <memcpy>:
 8004922:	2300      	movs	r3, #0
 8004924:	b510      	push	{r4, lr}
 8004926:	429a      	cmp	r2, r3
 8004928:	d100      	bne.n	800492c <memcpy+0xa>
 800492a:	bd10      	pop	{r4, pc}
 800492c:	5ccc      	ldrb	r4, [r1, r3]
 800492e:	54c4      	strb	r4, [r0, r3]
 8004930:	3301      	adds	r3, #1
 8004932:	e7f8      	b.n	8004926 <memcpy+0x4>

08004934 <_realloc_r>:
 8004934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004936:	0006      	movs	r6, r0
 8004938:	000c      	movs	r4, r1
 800493a:	0015      	movs	r5, r2
 800493c:	2900      	cmp	r1, #0
 800493e:	d105      	bne.n	800494c <_realloc_r+0x18>
 8004940:	0011      	movs	r1, r2
 8004942:	f7ff fc51 	bl	80041e8 <_malloc_r>
 8004946:	0004      	movs	r4, r0
 8004948:	0020      	movs	r0, r4
 800494a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800494c:	2a00      	cmp	r2, #0
 800494e:	d103      	bne.n	8004958 <_realloc_r+0x24>
 8004950:	f7ff fbde 	bl	8004110 <_free_r>
 8004954:	2400      	movs	r4, #0
 8004956:	e7f7      	b.n	8004948 <_realloc_r+0x14>
 8004958:	f000 f81b 	bl	8004992 <_malloc_usable_size_r>
 800495c:	0007      	movs	r7, r0
 800495e:	4285      	cmp	r5, r0
 8004960:	d802      	bhi.n	8004968 <_realloc_r+0x34>
 8004962:	0843      	lsrs	r3, r0, #1
 8004964:	42ab      	cmp	r3, r5
 8004966:	d3ef      	bcc.n	8004948 <_realloc_r+0x14>
 8004968:	0029      	movs	r1, r5
 800496a:	0030      	movs	r0, r6
 800496c:	f7ff fc3c 	bl	80041e8 <_malloc_r>
 8004970:	9001      	str	r0, [sp, #4]
 8004972:	2800      	cmp	r0, #0
 8004974:	d0ee      	beq.n	8004954 <_realloc_r+0x20>
 8004976:	002a      	movs	r2, r5
 8004978:	42bd      	cmp	r5, r7
 800497a:	d900      	bls.n	800497e <_realloc_r+0x4a>
 800497c:	003a      	movs	r2, r7
 800497e:	0021      	movs	r1, r4
 8004980:	9801      	ldr	r0, [sp, #4]
 8004982:	f7ff ffce 	bl	8004922 <memcpy>
 8004986:	0021      	movs	r1, r4
 8004988:	0030      	movs	r0, r6
 800498a:	f7ff fbc1 	bl	8004110 <_free_r>
 800498e:	9c01      	ldr	r4, [sp, #4]
 8004990:	e7da      	b.n	8004948 <_realloc_r+0x14>

08004992 <_malloc_usable_size_r>:
 8004992:	1f0b      	subs	r3, r1, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1f18      	subs	r0, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	da01      	bge.n	80049a0 <_malloc_usable_size_r+0xe>
 800499c:	580b      	ldr	r3, [r1, r0]
 800499e:	18c0      	adds	r0, r0, r3
 80049a0:	4770      	bx	lr
	...

080049a4 <_init>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr

080049b0 <_fini>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr
